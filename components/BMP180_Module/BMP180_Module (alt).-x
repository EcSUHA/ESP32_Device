/* #################################################################################################
 *
 *      Name: BMP180 Module
 *  Function: This is used to set up GPIOs as a switch with the goal to control switching hardware
 *            (relay, ...). The GPIO switching is Hardware PWM driven (for ESP32 SOC only). 
 *            Module for use with SCDE (Smart Connected Device Engine) only !
 *
 *  ESP 8266EX & ESP32 SoC Activities ...
 *  HoME CoNTROL & Smart Connected Device Engine Activities ...
 *  Copyright by EcSUHA
 *
 *  Created by Maik Schulze, Sandfuhren 4, 38448 Wolfsburg, Germany for EcSUHA.de 
 *
 *  MSchulze780@GMAIL.COM
 *  EcSUHA - ECONOMIC SURVEILLANCE AND HOME AUTOMATION - WWW.EcSUHA.DE
 * #################################################################################################
 *
 *
 */


static const char* TAG = "BMP180 I2C Driver";


#include <ProjectConfig.h>
#include <esp8266.h>
#include <Platform.h>



// the Smart-Connected-Device-Engine structures & types ...
#include <SCDE_s.h>

// provides WebIf, need the structures & types ...
#include "WebIf_Module.h"

// this Module uses an 1st stage, need the structures & types ...
#include "ESP32_I2C_Master_Module_s.h"

// this Modules structures & types ...
#include "BMP180_Module.h"





#include <math.h>


// -------------------------------------------------------------------------------------------------



// set default build verbose - if no external override
#ifndef BMP180_Module_DBG  
#define BMP180_Module_DBG  5	// 5 is default
#endif 



// -------------------------------------------------------------------------------------------------


/// BMP180 defines ...
#define ACK_CHECK_EN    0x1     // I2C master will check ack from slave
#define ACK_CHECK_DIS   0x0     // I2C master will not check ack from slave
#define ACK_VAL         0x0     // I2C ack value
#define NACK_VAL        0x1     // I2C nack value

#define BMP180_ADDRESS 0x77     // I2C address of BMP180

#define BMP180_ULTRA_LOW_POWER  0
#define BMP180_STANDARD         1
#define BMP180_HIGH_RES         2
#define BMP180_ULTRA_HIGH_RES   3

// for adressing calibration data AC1-MD (16 bit registers)
#define BMP180_CAL_AC1          0xAA
#define BMP180_CAL_AC2          0xAC
#define BMP180_CAL_AC3          0xAE
#define BMP180_CAL_AC4          0xB0
#define BMP180_CAL_AC5          0xB2
#define BMP180_CAL_AC6          0xB4
#define BMP180_CAL_B1           0xB6
#define BMP180_CAL_B2           0xB8
#define BMP180_CAL_MB           0xBA 
#define BMP180_CAL_MC           0xBC
#define BMP180_CAL_MD           0xBE

#define BMP180_CONTROL             0xF4  // Control register
#define BMP180_DATA_TO_READ        0xF6  // Read results here
#define BMP180_READ_TEMP_CMD       0x2E  // Request temperature measurement
#define BMP180_READ_PRESSURE_CMD   0x34  // Request pressure measurement

// Calibration parameters
/*static int16_t ac1;
static int16_t ac2;
static int16_t ac3;
static uint16_t ac4;
static uint16_t ac5;
static uint16_t ac6;
static int16_t b1;
static int16_t b2;
static int16_t mb;
static int16_t mc;
static int16_t md;
static uint8_t oversampling = BMP180_ULTRA_HIGH_RES;*/



// -------------------------------------------------------------------------------------------------

#include <WebIf_EspFSStdFileTX.h>
#include <WebIf_EspFSAdvFileTX.h>

#include "HTools_cgi.h"
#include <ServAPCfg_tpl.h>
#include <CGI_Redirect.h>



// -------------------------------------------------------------------------------------------------



/*
 * Implemented Values for Keys
 */

// BMP180_SET_SIG_OUT_EN -> 'SIG_OUT_EN' -> Disabled|Enabled
SelectAData BMP180_DisEna[] = {  //ID, Text MAX CGI LEN BEACHTEN!!!
  {0,"Disabled"},
  {1,"Enabled"}, 
  {0, NULL}
  };

// BMP180_SET_IDLE_LV -> 'IDLE_LV' -> Low|High
SelectAData BMP180_LoHi[] = {  //ID, Text MAX CGI LEN BEACHTEN!!!
  {0,"Low"},
  {1,"High"}, 
  {0, NULL}
  };

// BMP180_SET_BLOCK -> 'PWM_BLOCK'-> High_Speed|Low_Speed
SelectAData BMP180_PWM_BLOCK[] = {  //ID, Text MAX CGI LEN BEACHTEN!!!
  {0,"High_Speed"},
  {1,"Low_Speed"},
  {0, NULL}
  };

// BMP180_SET_TICK_SOURCE -> 'TICK_SOURCE'-> REF|APB_SLOW
SelectAData BMP180_TICK_SOURCE[] = {  //ID, Text MAX CGI LEN BEACHTEN!!!
  {0,"REF"},
  {1,"APB_SLOW"}, 
  {0, NULL}
  };



/**
 * For Type: BMP180
 * Implemented-Args-Keys, for input (MAX 64!). //IAK!!
 * KEYs-Field-Set for Feature specific query. Will be generated by SCDEH_ParseStrToparsedKVInput()
 * parsed result is stored in BMP180_parsedKVInput_t
 */
enum BMP180_SET_IK {				// Bit #XX for debugging

  // S0 calculation configuration
    BMP180_SET_ON		= 0			// Bit #00 'ON'  -> 
  , BMP180_SET_OFF				// Bit #01 'OFF'  -> 

  , BMP180_SET_MAX				// Bit #02 'MAX'  -> 
  , BMP180_SET_MIN				// Bit #03 'MIN'  -> 

  , BMP180_SET_VAL				// Bit #04 'VAL'  -> 
  , BMP180_SET_DIM				// Bit #05 'DIM'  -> 

  , BMP180_SET_NAME				// Bit #06 'NAME'  -> 
  , BMP180_SET_CAPS				// Bit #07 'CAPS'  -> 

  // Block #01 PWM configuration
  , BMP180_SET_GPIO				// Bit #08 'GPIO' -> 
  , BMP180_SET_BLOCK				// Bit #09 'BLOCK' -> 
  , BMP180_SET_CHANNEL				// Bit #10 'CHANNEL' -> 
  , BMP180_SET_TIMER				// Bit #11 'TIMER' -> 

  , BMP180_SET_DUTY				// Bit #12 'DUTY' ->
  , BMP180_SET_HPOINT				// Bit #13 'HPOINT' ->
  , BMP180_SET_SIG_OUT_EN				// Bit #14 'SIG_OUT_EN' ->
  , BMP180_SET_IDLE_LV				// Bit #15 'IDLE_LV' ->

  , BMP180_SET_RESOLUTION			// Bit #16 'RESOLUTION' -> 
  , BMP180_SET_TICK_SOURCE			// Bit #17 'TICK_SOURCE' ->
  , BMP180_SET_FREQ_HZ				// Bit #18 'FREQ_HZ' ->

  , BMP180_SET_THR_L_LIM_EN			// Bit #19 'THR_L_LIM_EN' -> DIS/ENA
  , BMP180_SET_THR_H_LIM_EN			// Bit #20 'THR_H_LIM_EN' -> DIS/ENA
  , BMP180_SET_THR_ZERO_EN			// Bit #21 'THR_ZERO_EN' -> DIS/ENA
  , BMP180_SET_FILTER_EN				// Bit #22 'FILTER_EN' -> DIS/ENA
  , BMP180_SET_FILTER_THRES			// Bit #23 'FILTER_THRES' -> decval 10 bit zahl
  , BMP180_SET_CNT_THRES1				// Bit #24 'CNT_THRES1' -> decval 16 bit zahl
  , BMP180_SET_CNT_THRES0				// Bit #25 'CNT_THRES0' -> decval 16 bit zahl
  , BMP180_SET_CNT_L_LIM				// Bit #26 'CNT_L_LIM' -> decval 10 bit zahl
  , BMP180_SET_CNT_H_LIM				// Bit #27 'CNT_H_LIM' -> decval 10 bit zahl

// end marker
  , BMP180_SET_IK_Number_of_keys			// Bit #27 MAX 64 IMPLEMENTED !

};

 

/**
 * For Type: BMP180
 * Implemented readings (MAX 32!)
 * Can be assigned to Implemented Keys, if affected
 */
enum BMP180_Readings {			// Bit #XX for debugging

   BMP180_R_DUTY		= (1<<0)	// Bit #00 'Duty'  -> 

  ,BMP180_R_RESOLUTION	= (1<<1)	// Bit #01 'Resolution' -> 

  ,BMP180_R_NAME		= (1<<2)	// Bit #02 'name' + caps + ufid -> 

};



/**
 * For Type: BMP180
 * Implemented KEYS and assigned readings for this query - analyzed by by http_parser_parse_url()

 * Num should meet enum XX_QueryFields
 * Result is stored in struct SCDE_XX_parsedKVInput
 */
kvParseImplementedKeys_t BMP180_Set_ImplementedKeys[] = {
// |                                                          affected readings										              	|  CMD

// for usage 
   { BMP180_R_DUTY | BMP180_R_RESOLUTION															, "ON" }		// #00
  ,{ BMP180_R_DUTY | BMP180_R_RESOLUTION															, "OFF" }		// #01
  ,{ BMP180_R_DUTY | BMP180_R_RESOLUTION															, "MAX" }		// #02
  ,{ BMP180_R_DUTY | BMP180_R_RESOLUTION															, "MIN" }		// #03
  ,{ BMP180_R_DUTY | BMP180_R_RESOLUTION															, "VAL" }		// #04
  ,{ BMP180_R_DUTY | BMP180_R_RESOLUTION															, "DIM" }		// #05

  ,{ BMP180_R_DUTY | BMP180_R_RESOLUTION | BMP180_R_NAME												, "NAME" }		// #06
  ,{ BMP180_R_DUTY | BMP180_R_RESOLUTION | BMP180_R_NAME												, "CAPS" }		// #07

// for configuration
  ,{ 0																					, "GPIO" }		// #08
  ,{ 0																					, "BLOCK" }		// #09
  ,{ 0																					, "CHANNEL" }		// #10
  ,{ 0																					, "TIMER" }		// #11
  ,{ 0																					, "DUTY" }		// #12
  ,{ 0																					, "HPOINT" }		// #13
  ,{ 0																					, "SIG_OUT_EN" }	// #14
  ,{ 0																					, "IDLE_LV" }		// #15

  ,{ 0																					, "RESOLUTION" }		// #16
  ,{ 0																					, "TICK_SOURCE" }	// #17
  ,{ 0																					, "FREQ_HZ" }		// #18

  ,{ 0																					, "THR_L_LIM_EN" }	// #19
  ,{ 0																					, "THR_H_LIM_EN" }	// #20
  ,{ 0																					, "THR_ZERO_EN" }	// #21
  ,{ 0																					, "FILTER_EN" }		// #22
  ,{ 0																					, "FILTER_THRES" }	// #23
  ,{ 0																					, "CNT_THRES1" }	// #24
  ,{ 0																					, "CNT_THRES0" }	// #25
  ,{ 0																					, "CNT_L_LIM" }		// #26
  ,{ 0																					, "CNT_H_LIM" }		// #27

}; // number of elements should be equal with XX_SET_IK_Number_of_keys, LIMIT IS 64 ELEMENTS !



/**
 * -------------------------------------------------------------------------------------------------
 *  DName: BMP180_ActiveResourcesDataA_forWebIf
 *  Desc: Resource-Content-structure of active Directory - PART A (Resource-Data-Row)
 *  Data: WebIf_ActiveResourcesDataA_t[X] from HttpD.h
 * -------------------------------------------------------------------------------------------------
 */
// Content:   AllowedMethodBF          | AllowedDocMimeBF  | AllowedSchemeBF |free|CgiNo| EnaByBit | Url
const WebIf_ActiveResourcesDataA_t BMP180_ActiveResourcesDataA_forWebIf[] = {  //ICACHE_RODATA_ATTR = 

  // SOC Hardware Cfg
  { 0b00000000000000000000000000001010, 0b0000000000001110, 0b0000000000000001,  0,  0, 0b00000000, "/SoCHWCfg"}

  // WiFi Stations Cfg
 ,{ 0b00000000000000000000000000001010, 0b0000000000001110, 0b0000000000000001,  0,  1, 0b00000000, "/WiFi/StationCfg"}

  // WIFI Q-Connect PAGES
 ,{ 0b00000000000000000000000000001010, 0b0000000000000010, 0b0000000000000001,  0,  2, 0b00000000, "/WiFi/QConnect"}
 ,{ 0b00000000000000000000000000001010, 0b0000000000001000, 0b0000000000000001,  0,  3, 0b00000000, "/WiFi/WiFiScan"}
 ,{ 0b00000000000000000000000000001010, 0b0000000000000100, 0b0000000000000001,  0,  4, 0b00000000, "/WiFi/Connect"}
 ,{ 0b00000000000000000000000000001010, 0b0000000000000100, 0b0000000000000001,  0,  5, 0b00000000, "/WiFi/Setmode"}

  // Service Access Point Cfg
 ,{ 0b00000000000000000000000000001010, 0b0000000000001110, 0b0000000000000001,  0,  6, 0b00000000, "/WiFi/ServAPCfg"}

  // TimeStamp Cfg
 ,{ 0b00000000000000000000000000001010, 0b0000000000001110, 0b0000000000000001,  0,  7, 0b00000000, "/TiStCfg"}

  // Firmware Update
 ,{ 0b00000000000000000000000000001010, 0b0000000000001110, 0b0000000000000001,  0,  8, 0b00000000, "/Firmware"}

  // Redirects
 ,{ 0b00000000000000000000000000001010, 0b0000000000000001, 0b0000000000000001,  0,  9, 0b00000000, "/WiFi"}	// nomime
 ,{ 0b00000000000000000000000000001010, 0b0000000000000001, 0b0000000000000001,  0,  9, 0b00000000, "/WiFi/"}	// nomime
 ,{ 0b00000000000000000000000000001010, 0b0000000000000001, 0b0000000000000001,  0, 10, 0b00000000, "/"}	// nomime
 ,{ 0b00000000000000000000000000001010, 0b0000000000000010, 0b0000000000000001,  0, 10, 0b00000000, "/index"}	// .htm

  // Secret services
 ,{ 0b00000000000000000000000000001010, 0b0000000000100000, 0b0000000000000001,  0, 11, 0b00000000, "/32MBitFlash"}
 ,{ 0b00000000000000000000000000001010, 0b0000000000100000, 0b0000000000000001,  0, 12, 0b00000000, "/wfs"}

 ,{0,0,0,0,0,0,"*"}

  };



/**
 * -------------------------------------------------------------------------------------------------
 *  DName: BMP180_ActiveResourcesDataB_forWebIf
 *  Desc: Resource-Content-structure of active Directory - PART B (Procedure-Call-Data-Row) 
 *  Data: WebIf_ActiveResourcesDataB_t[X] from HttpD.h
 * -------------------------------------------------------------------------------------------------
 */
// CgiFucID=(No.<<16)+AllowedSchemeBF |      cgi            |     cgi_data
const WebIf_ActiveResourcesDataB_t BMP180_ActiveResourcesDataB_forWebIf[] =  {  //ICACHE_RODATA_ATTR =

  // ### SOC Hardware Cfg ###
  {( 0<<16) +	0b0000000000000010,	NULL,NULL}//	EspFsTemplate_cgi,	SoCHWCfg_tpl	}
 ,{( 0<<16) +	0b0000000000000100,	NULL,NULL}//	SoCHWCfg_cgi,		NULL		}
 ,{( 0<<16) +	0b0000000000001000,	NULL,NULL}//	SoCHWCfg_jso,		NULL		}

  // ### WiFi Station Cfg ###
 ,{( 1<<16) +	0b0000000000000010,	NULL,NULL}//	EspFsTemplate_cgi,	StationCfg_tpl	}
 ,{( 1<<16) +	0b0000000000000100,	NULL,NULL}//	StationCfg_cgi,		NULL		}
 ,{( 1<<16) +	0b0000000000001000,	NULL,NULL}//	StationCfg_jso,		NULL		}

  // ### WIFI Q-Connect PAGES ###
 ,{( 2<<16) +	0b0000000000000010,	NULL,NULL}//	EspFsTemplate_cgi,	WifiQConnect_tpl}
 ,{( 3<<16) +	0b0000000000001000,	NULL,NULL}//	WiFiScan_jso,		NULL		}
 ,{( 4<<16) +	0b0000000000000100,	NULL,NULL}//	WiFiConnect_cgi,	NULL		}
 ,{( 5<<16) +	0b0000000000000100,	NULL,NULL}//	WifiSetMode_cgi,	NULL		}	

  // ### Service Access Point Cfg ###
 ,{( 6<<16) +	0b0000000000000010,	WebIf_EspFSAdvFileTX,	ServAPCfg_tpl	}
 ,{( 6<<16) +	0b0000000000000100,	NULL,NULL}//	ServAPCfg_cgi,		NULL		}
 ,{( 6<<16) +	0b0000000000001000,	NULL,NULL}//	ServAPCfg_jso,		NULL		}

  // ### TimeStamp Cfg ###
 ,{( 7<<16) +	0b0000000000000010,	NULL,NULL}//	EspFsTemplate_cgi,	TiStCfg_tpl	}
 ,{( 7<<16) +	0b0000000000000100,	NULL,NULL}//	TiStCfg_cgi,		NULL		}
 ,{( 7<<16) +	0b0000000000001000,	NULL,NULL}//	TiStCfg_jso,		NULL		}

  // ### Firmware Update ###
 ,{( 8<<16) +	0b0000000000000010,	NULL,NULL}//	EspFsTemplate_cgi,	FirmwareUd_tpl	}
 ,{( 8<<16) +	0b0000000000000100,	NULL,NULL}//	FirmwareUd_cgi,		NULL		}
 ,{( 8<<16) +	0b0000000000001000,	NULL,NULL}//	FirmwareUd_jso,		NULL		}

  // ### Redirects ###
 ,{( 9<<16) +	0b0000000000000001,	cgiRedirect,	"/WiFi/QConnect.htm"		}
 ,{(10<<16) +	0b0000000000000001,	cgiRedirect,	"/CoNTROL_8S-1C-1ADC.htm"	}
 ,{(10<<16) +	0b0000000000000010,	cgiRedirect,	"/CoNTROL_8S-1C-1ADC.htm"	}

  // ### Secret services ###
 ,{(11<<16) +	0b0000000000100000,	ReadFullFlash_cgi,	NULL		}		//.bin
 ,{(12<<16) +	0b0000000000100000,	NULL,NULL}//	WriteFileSystem_cgi,	NULL		}		//.bin

  };



/**
 * -------------------------------------------------------------------------------------------------
 *  DName: BMP180_Module
 *  Desc: Data 'Provided By Module' for the BMP180 module (functions + infos this module 
 *        provides to SCDE)
 *  Data: 
 * -------------------------------------------------------------------------------------------------
 */
ProvidedByModule_t BMP180_ProvidedByModule = {   // A-Z order
  "BMP180"				// Type-Name of module -> on Linux libfilename.so !
  ,6					// size of Type-Name

  ,NULL					// Add
  ,BMP180_Attribute			// Attribute
  ,BMP180_Define			// Define
  ,NULL					// Delete
  ,NULL					// DirectRead
  ,NULL					// DirectWrite
  ,NULL					// Except
  ,NULL					// Get
  ,BMP180_IdleCb			// IdleCb
  ,BMP180_Initialize			// Initialize
  ,NULL					// Notify
  ,NULL					// Parse
  ,NULL					// Read
  ,NULL					// Ready
  ,NULL					// Rename
  ,BMP180_Set				// Set
  ,BMP180_Shutdown			// Shutdown
  ,NULL					// State
  ,NULL					// Sub
  ,BMP180_Undefine			// Undefine
  ,NULL					// Write
  ,NULL					// FnProvided
  ,sizeof(BMP180_Definition_t)		// Modul specific Size (Common_Definition_t + X)
};



/* -------------------------------------------------------------------------------------------------
 *  FName: Attribute Fn
 *  Desc: Informs an 'definition' of this 'module' for 'attribute' activities (set/delete)
 *  Info: 'attr_cmmand' is the command for the activity: set, delete
 *        'attr_name' is the attribute name
 *        'attr_value' is the attribute value
 *  Para: Common_Definition_t* p_entry_definition -> the 'definition' identified for the activities
 *	  const String_t attr_command -> the attribute-command
 *	  const String_t attr_name -> the attribute-name
 *	  const String_t attr_value -> the attribute-value
 *  Rets: Entry_String_t* -> = SCDE_OK (no ret msg) or VETO (SLTQ Entry_String_t* with ret msg)
 * -------------------------------------------------------------------------------------------------
 */
Entry_String_t* ICACHE_FLASH_ATTR
BMP180_Attribute(Common_Definition_t* p_entry_definition,
	 const String_t attr_command,
	 const String_t attr_name,
	 const String_t attr_value)
{
  // make common ptr to modul specific ptr
  BMP180_Definition_t* p_entry_bmp180_definition =
		  (BMP180_Definition_t*) p_entry_definition;

  // to store the ret_msg. SCDE_OK = no msg 
  Entry_String_t* p_entry_ret_msg = SCDE_OK;

// -------------------------------------------------------------------------------------------------

  #if BMP180_Module_DBG >= 5
  SCDEFn_at_BMP180_M->Log3Fn(p_entry_bmp180_definition->common.name,
	p_entry_bmp180_definition->common.nameLen,
	5,
	"Attribute Fn (Module '%.*s') is called with args: "
	"attr_command '%.*s' attr_name '%.*s' attr_value '%.*s'",
	p_entry_bmp180_definition->common.module->provided->typeNameLen,
	p_entry_bmp180_definition->common.module->provided->typeName,attr_command.len,
	attr_command.p_char,
  	attr_name.len,
	attr_name.p_char,
	attr_value.len,
	attr_value.p_char);
  #endif

// ------------------------------------------------------------------------------------------------

  return p_entry_ret_msg;
}



/**
 * -------------------------------------------------------------------------------------------------
 *  FName: BMP180_Define
 *  Desc: Finalizes the defines a new "device" of 'BMP180' type. Contains devicespecific init code.
 *  Info: 
 *  Para: Common_Definition_t *Common_Definition -> prefilled ESP32Control Definition
 *        char *Definition -> the last part of the CommandDefine arg* 
 *  Rets: strTextMultiple_t* -> response text NULL=no text
 * -------------------------------------------------------------------------------------------------
 */
strTextMultiple_t*
BMP180_Define(Common_Definition_t *Common_Definition)
{
  // for Fn response msg
  strTextMultiple_t *retMsg = NULL;

  // make common ptr to modul specific ptr
  BMP180_Definition_t* BMP180_Definition =
		  (BMP180_Definition_t*) Common_Definition;

// -------------------------------------------------------------------------------------------------

  #if BMP180_Module_DBG >= 5
  SCDEFn_at_BMP180_M->Log3Fn(Common_Definition->name
	,Common_Definition->nameLen
	,5
	,"DefineFn of Module '%.*s' is called to continue creation of Definition '%.*s' with args '%.*s'."
	,BMP180_Definition->common.module->provided->typeNameLen
	,BMP180_Definition->common.module->provided->typeName
	,BMP180_Definition->common.nameLen
	,BMP180_Definition->common.name
	,BMP180_Definition->common.definitionLen
	,BMP180_Definition->common.definition);
  #endif

// ------------------------------------------------------------------------------------------------

  // new conversation
  uint8_t *defArgsText = Common_Definition->definition;
  size_t defArgsTextLen = Common_Definition->definitionLen;

  // Check for args. This type requires args...
  if (!defArgsTextLen) {

	// alloc mem for retMsg
	retMsg = malloc(sizeof(strTextMultiple_t));

	// response with error text
	retMsg->strTextLen = asprintf(&retMsg->strText
		,"Parsing Error! Expected Args!");

	return retMsg;
  }

// ------------------------------------------------------------------------------------------------

  // store FD to Definition. Will than be processed in global loop ... -> THIS MODULE USES NO FD
  BMP180_Definition->common.fd = -1;

// ------------------------------------------------------------------------------------------------

  // init WebIf_Provided offset
//  ESP32Control_Definition->common.link =
//	&ESP32Control_Definition->WebIf_Provided;

  // check for loaded Module 'WebIf' -> get provided Fn
  BMP180_Definition->WebIf_Provided.WebIf_FnProvided =
	NULL;//(WebIf_FnProvided_t *) SCDEFn_at_BMP180_M->GetFnprovided("WebIf");

 // Providing data for WebIf? Initialise data provided for WebIf
  if (BMP180_Definition->WebIf_Provided.WebIf_FnProvided) {

	BMP180_Definition->WebIf_Provided.ActiveResourcesDataA =
		(WebIf_ActiveResourcesDataA_t *) &BMP180_ActiveResourcesDataA_forWebIf;

	BMP180_Definition->WebIf_Provided.ActiveResourcesDataB =
		(WebIf_ActiveResourcesDataB_t *) &BMP180_ActiveResourcesDataB_forWebIf;

	}

  else	{

	SCDEFn_at_BMP180_M->Log3Fn(Common_Definition->name
		,Common_Definition->nameLen
		,1
		,"Could not enable WebIf support for '%.*s'. Type '%.*s' detects Type 'WebIf' is NOT loaded!"
		,BMP180_Definition->common.nameLen
		,BMP180_Definition->common.name
		,BMP180_Definition->common.module->provided->typeNameLen
		,BMP180_Definition->common.module->provided->typeName);
	}

// ------------------------------------------------------------------------------------------------

  // Parse define-args (KEY=VALUE) protocol -> gets parsedKVInput in allocated mem, NULL = ERROR
  parsedKVInputArgs_t *parsedKVInput = 
	SCDEFn_at_BMP180_M->ParseKVInputArgsFn(BMP180_SET_IK_Number_of_keys	// Num Implementated KEYs MAX
	,BMP180_Set_ImplementedKeys				// Implementated Keys
	,defArgsText							// our args text
	,defArgsTextLen);						// our args text len

  // parsing may report an problem. args contain: unknown keys, double keys, ...?
  if (!parsedKVInput) {

	// alloc mem for retMsg
	retMsg = malloc(sizeof(strTextMultiple_t));

	// response with error text
	retMsg->strTextLen = asprintf(&retMsg->strText
		,"Parsing Error! Args '%.*s' not taken! Check the KEYs!"
		,defArgsTextLen
		,defArgsText);

	return retMsg;
  }

// ------------------------------------------------------------------------------------------------






// ------------------------------------------------------------------------------------------------

  // set required Keys -> Keys that should be there in this request
  parsedKVInput->requiredKVBF = ( (1 << BMP180_SET_GPIO)
			        | (1 << BMP180_SET_BLOCK)
			        | (1 << BMP180_SET_CHANNEL)
			        | (1 << BMP180_SET_TIMER)
			        | (1 << BMP180_SET_DUTY)
			        | (1 << BMP180_SET_HPOINT)
			        | (1 << BMP180_SET_SIG_OUT_EN)
			        | (1 << BMP180_SET_IDLE_LV)
			        | (1 << BMP180_SET_RESOLUTION)
			        | (1 << BMP180_SET_TICK_SOURCE)
			        | (1 << BMP180_SET_FREQ_HZ) );

  // set forbidden Keys -> Keys that are not allowed in this request
  parsedKVInput->forbiddenKVBF = 0;
/*
  // process the set-args (key=value@) protocol
  if (BMP180_ProcessKVInputArgs(BMP180_Definition
	,parsedKVInput				// KVInput parsed
	,defArgsText				// our args text
	,defArgsTextLen) ) {			// our args text len

	// Processing reports an problem. Args not taken. Response with error text.

	// alloc mem for retMsg
	retMsg = malloc(sizeof(strTextMultiple_t));

	// response with error text
	retMsg->strTextLen = asprintf(&retMsg->strText
		,"Processing Error! Args '%.*s' not taken! Check the VALUEs!"
		,defArgsTextLen
		,defArgsText);

	// free allocated memory for query result key-field
	free(parsedKVInput);

	return retMsg;

  }
*/
// ------------------------------------------------------------------------------------------------

  // set affected readings
 // BMP180_SetAffectedReadings(BMP180_Definition
//	,parsedKVInput->affectedReadingsBF);

// ------------------------------------------------------------------------------------------------

  // free allocated memory for query result key-field
  free(parsedKVInput);

// ------------------------------------------------------------------------------------------------

//play here
#define REFERENCE_PRESSUREx 103800l
  // replace by key=value init
  BMP180_Definition->oversampling = BMP180_ULTRA_HIGH_RES;
  BMP180_Definition->reference_pressure = REFERENCE_PRESSUREx;
  // + poll intervall

  // temp build 'ESP32_I2C_Master'
	BMP180_Definition->stage1definitionNameLen = 
		asprintf(&BMP180_Definition->stage1definitionName,"I2CM");

// ------------------------------------------------------------------------------------------------

  // get pointer to 1st stage modul (we developing for...)
  ESP32_I2C_Master_Definition_t* ESP32_I2C_Master_Definition =
		(ESP32_I2C_Master_Definition_t*) SCDEFn_at_BMP180_M->GetDefinitionPtrByNameFn(
		BMP180_Definition->stage1definitionNameLen,
		BMP180_Definition->stage1definitionName);

  // not found - retMsg & define-veto
  if (!ESP32_I2C_Master_Definition) {

	// alloc mem for retMsg
	retMsg = malloc(sizeof(strTextMultiple_t));

	// response with error text
	retMsg->strTextLen = asprintf(&retMsg->strText
		,"Stage 1 Module '%.*s' not found! Stopping define!"
		,BMP180_Definition->stage1definitionNameLen
		,BMP180_Definition->stage1definitionName);

	return retMsg;
  }

// ------------------------------------------------------------------------------------------------

  #if BMP180_Module_DBG >= 7
  SCDEFn_at_BMP180_M->Log3Fn(Common_Definition->name
	,Common_Definition->nameLen
	,7
	,"Found an first Stage defined as name '%.*s'. Its Type '%.*s' !"
	,ESP32_I2C_Master_Definition->common.nameLen
	,ESP32_I2C_Master_Definition->common.name
	,ESP32_I2C_Master_Definition->common.module->provided->typeNameLen
	,ESP32_I2C_Master_Definition->common.module->provided->typeName);
  #endif

// ------------------------------------------------------------------------------------------------

  // store link to stage 1
  BMP180_Definition->ESP32_I2C_Master_Definition = 
	ESP32_I2C_Master_Definition;

  // get function callbacks provided & made accessible from stage 1 Module
  ESP32_I2C_Master_Fn_t* ESP32_I2C_Master_Fn =
	ESP32_I2C_Master_Definition->ESP32_I2C_Master_Fn;

// ------------------------------------------------------------------------------------------------

  // check if the bmp180 is there
  uint8_t reg = 0x00;
  retMsg = bmp180_master_write_slave(BMP180_Definition, &reg, 1);

  // not found error! - retMsg & define-veto
  if (retMsg) { ///////////////fehler ist schon in ret msg!!!!!!!!!!!1

	// alloc mem for retMsg
	retMsg = malloc(sizeof(strTextMultiple_t));

	// response with error text
	retMsg->strTextLen = asprintf(&retMsg->strText,
		"BMP180 sensor not found at 0x%02x! Stopping define!",
		BMP180_ADDRESS);

	return retMsg;
  }

// ------------------------------------------------------------------------------------------------

  #if BMP180_Module_DBG >= 5
  SCDEFn_at_BMP180_M->Log3Fn(Common_Definition->name,
	Common_Definition->nameLen,
	5,
	"BMP180 sensor found at 0x%02x",
	BMP180_ADDRESS);
  #endif

// ------------------------------------------------------------------------------------------------

  // get the calibration values from BMP180 (only one error msg)
  retMsg  = 
	bmp180_read_int16(BMP180_Definition, BMP180_CAL_AC1, &BMP180_Definition->ac1);

  if (!retMsg) retMsg = 
	bmp180_read_int16(BMP180_Definition, BMP180_CAL_AC2, &BMP180_Definition->ac2);

  if (!retMsg) retMsg = 
	bmp180_read_int16(BMP180_Definition, BMP180_CAL_AC3, &BMP180_Definition->ac3);

  if (!retMsg) retMsg = 
	bmp180_read_uint16(BMP180_Definition, BMP180_CAL_AC4, &BMP180_Definition->ac4);

  if (!retMsg) retMsg = 
	bmp180_read_uint16(BMP180_Definition, BMP180_CAL_AC5, &BMP180_Definition->ac5);

  if (!retMsg) retMsg = 
	bmp180_read_uint16(BMP180_Definition, BMP180_CAL_AC6, &BMP180_Definition->ac6);

  if (!retMsg) retMsg = 
	bmp180_read_int16(BMP180_Definition, BMP180_CAL_B1, &BMP180_Definition->b1);

  if (!retMsg) retMsg = 
	bmp180_read_int16(BMP180_Definition, BMP180_CAL_B2, &BMP180_Definition->b2);

  if (!retMsg) retMsg = 
	bmp180_read_int16(BMP180_Definition, BMP180_CAL_MB, &BMP180_Definition->mb);

  if (!retMsg) retMsg = 
	bmp180_read_int16(BMP180_Definition, BMP180_CAL_MC, &BMP180_Definition->mc);

  if (!retMsg) retMsg = 
	bmp180_read_int16(BMP180_Definition, BMP180_CAL_MD, &BMP180_Definition->md);

  // an error occured - retMsg & define-veto
  if (retMsg) { ///////////////fehler ist schon in ret msg!!!!!!!!!!!1

 	ESP_LOGE(TAG, "BMP180 sensor calibration read failure, err!"); // = %d", err);

	return retMsg; // ???????? ESP_ERR_BMP180_CALIBRATION_FAILURE;
    }

  #if BMP180_Module_DBG >= 7
  SCDEFn_at_BMP180_M->Log3Fn(Common_Definition->name,
	Common_Definition->nameLen,
	7,
	"DefineFn of Module '%.*s' has calibration values:"
	"AC1: %d, AC2: %d, AC3: %d, AC4: %d, AC5: %d, AC6: %d, "
	"B1: %d, B2: %d, MB: %d, MC: %d, MD: %d",
	BMP180_Definition->common.module->provided->typeNameLen,
	BMP180_Definition->common.module->provided->typeName,
	BMP180_Definition->ac1,
	BMP180_Definition->ac2,
	BMP180_Definition->ac3,
	BMP180_Definition->ac4, 
	BMP180_Definition->ac5, 
	BMP180_Definition->ac6,
	BMP180_Definition->b1,
	BMP180_Definition->b2,
	BMP180_Definition->mb,
	BMP180_Definition->mc,
	BMP180_Definition->md);
  #endif

// ------------------------------------------------------------------------------------------------


// init ends here



  // read pressure
  retMsg = bmp180_read_pressure(BMP180_Definition,
	&BMP180_Definition->pressure);

  if (retMsg) {

	ESP_LOGE(TAG, "Reading of pressure from BMP180 failed, err =");// %d", err);

	goto err;
  }

  // read altitude
  retMsg = bmp180_read_altitude(BMP180_Definition,
	BMP180_Definition->reference_pressure,
	&BMP180_Definition->altitude);

  if (retMsg) {

	ESP_LOGE(TAG, "Reading of altitude from BMP180 failed, err =");// %d", err);

	goto err;
  }

  // read temperature
  retMsg = bmp180_read_temperature(BMP180_Definition,
	&BMP180_Definition->temperature);

  if (retMsg) {

	ESP_LOGE(TAG, "Reading of temperature from BMP180 failed, err =");// %d", err);

	goto err;
  }

  #if BMP180_Module_DBG >= 7
  SCDEFn_at_BMP180_M->Log3Fn(Common_Definition->name,
	Common_Definition->nameLen,
	7,
	"Got values Pressure %d Pa, Altitude %.1f m, Temperature : %.1f °C",
	BMP180_Definition->pressure,
	BMP180_Definition->altitude,
	BMP180_Definition->temperature);
  #endif

// ------------------------------------------------------------------------------------------------

//free(parsedKVInput);??

  // set up 1st idle Callback
  BMP180_Definition->common.Common_CtrlRegA |= F_WANTS_IDLE_TASK;

  return retMsg;

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

// alternative end in case of errors - free/destroy all allocated things and return SCDE_FAIL.
  err:

  if (parsedKVInput) {

    free(parsedKVInput);
  }

  return retMsg;
}



/*
 * ------------------------------------------------------------------------------------------------
 *  FName: BMP180_IdleCb	
 *  Desc: Timed callback, X Hz, to do type dependend processing tasks.
 *  Info: 
 *  Para: Common_Definition_t *Common_Definition -> prefilled WebIf Definition 
 *  Rets: ? unclear char* -> response text NULL=no text
 * ------------------------------------------------------------------------------------------------
 */
int
BMP180_IdleCb(Common_Definition_t *Common_Definition)
{

  // for Fn response msg
  strTextMultiple_t *retMsg = NULL;

  // prepare STAILQ head for multiple RetMsg storage
  struct headRetMsgMultiple_s headRetMsgMultiple;

  // Initialize the queue
  STAILQ_INIT(&headRetMsgMultiple);

  // make common ptr to modul specific ptr
  BMP180_Definition_t *BMP180_Definition =
		  (BMP180_Definition_t*) Common_Definition;

// -------------------------------------------------------------------------------------------------

  #if BMP180_Module_DBG >= 7
  SCDEFn_at_BMP180_M->Log3Fn(Common_Definition->name
	,Common_Definition->nameLen
	,7
	,"IdleCb called. (Module '%.*s')"
	,BMP180_Definition->common.module->provided->typeNameLen
	,BMP180_Definition->common.module->provided->typeName);
  #endif

// ------------------------------------------------------------------------------------------------

  // get pointer to 1st stage modul (we developing for...)
  ESP32_I2C_Master_Definition_t* ESP32_I2C_Master_Definition =
		(ESP32_I2C_Master_Definition_t*) SCDEFn_at_BMP180_M->GetDefinitionPtrByNameFn(
		BMP180_Definition->stage1definitionNameLen,
		BMP180_Definition->stage1definitionName);

  // not found - retMsg & define-veto
  if (!ESP32_I2C_Master_Definition) {

	// alloc mem for retMsg
	retMsg = malloc(sizeof(strTextMultiple_t));

	// response with error text
	retMsg->strTextLen = asprintf(&retMsg->strText
		,"Stage 1 Module '%.*s' not found! Stopping define!"
		,BMP180_Definition->stage1definitionNameLen
		,BMP180_Definition->stage1definitionName);

	return retMsg;
  }

// ------------------------------------------------------------------------------------------------

  #if BMP180_Module_DBG >= 7
  SCDEFn_at_BMP180_M->Log3Fn(Common_Definition->name
	,Common_Definition->nameLen
	,7
	,"Found an first Stage defined as name '%.*s'. Its Type '%.*s' !"
	,ESP32_I2C_Master_Definition->common.nameLen
	,ESP32_I2C_Master_Definition->common.name
	,ESP32_I2C_Master_Definition->common.module->provided->typeNameLen
	,ESP32_I2C_Master_Definition->common.module->provided->typeName);
  #endif

// ------------------------------------------------------------------------------------------------

  // store link to stage 1
  BMP180_Definition->ESP32_I2C_Master_Definition = 
	ESP32_I2C_Master_Definition;

// ------------------------------------------------------------------------------------------------

  // read pressure
  retMsg = bmp180_read_pressure(BMP180_Definition,
	&BMP180_Definition->pressure);

  if (retMsg) {

	ESP_LOGE(TAG, "Reading of pressure from BMP180 failed, err =");// %d", err);

	goto err;
  }

  // read altitude
  retMsg = bmp180_read_altitude(BMP180_Definition,
	BMP180_Definition->reference_pressure,
	&BMP180_Definition->altitude);

  if (retMsg) {

	ESP_LOGE(TAG, "Reading of altitude from BMP180 failed, err =");// %d", err);

	goto err;
  }

  // read temperature
  retMsg = bmp180_read_temperature(BMP180_Definition,
	&BMP180_Definition->temperature);

  if (retMsg) {

	ESP_LOGE(TAG, "Reading of temperature from BMP180 failed, err =");// %d", err);

	goto err;
  }

  #if BMP180_Module_DBG >= 7
  SCDEFn_at_BMP180_M->Log3Fn(Common_Definition->name,
	Common_Definition->nameLen,
	7,
	"Got values Pressure %d Pa, Altitude %.1f m, Temperature : %.1f °C",
	BMP180_Definition->pressure,
	BMP180_Definition->altitude,
	BMP180_Definition->temperature);
  #endif

// -------------------------------------------------------------------------------------------

err:

  // set up next idle Callback
  BMP180_Definition->common.Common_CtrlRegA |= F_WANTS_IDLE_TASK;

  return 0; //retMsg;
}



/**
 * -------------------------------------------------------------------------------------------------
 *  FName: BMP180_Initialize
 *  Desc: Initializion of SCDE Function Callbacks of an new loaded module
 *  Info: Stores Module-Information (Function Callbacks) to SCDE-Root
 *  Para: SCDERoot_t* SCDERootptr -> ptr to SCDE Data Root
 *  Rets: ? unused
 *--------------------------------------------------------------------------------------------------
 */
int 
BMP180_Initialize(SCDERoot_t* SCDERootptr)
{

  // make data root locally available
  SCDERoot_at_BMP180_M = SCDERootptr;

  // make locally available from data-root: SCDEFn (Functions / callbacks) for faster operation
  SCDEFn_at_BMP180_M = SCDERootptr->SCDEFn;

  SCDEFn_at_BMP180_M->Log3Fn(BMP180_ProvidedByModule.typeName
		  ,BMP180_ProvidedByModule.typeNameLen
		  ,3
		  ,"InitializeFn called. Type '%.*s' now useable.\n"
		  ,BMP180_ProvidedByModule.typeNameLen
		  ,BMP180_ProvidedByModule.typeName);

  return 0;

}



/**
 * -------------------------------------------------------------------------------------------------
 *  FName: BMP180_Set
 *  Desc: Processes the device-specific command line arguments from the set command
 *  Info: Invoked by cmd-line 'Set ESP32Control_Definition.common.Name setArgs'
 *  Para: ESP32Control_Definition_t *ESP32Control_Definition -> WebIF Definition that should get a set cmd
 *        uint8_t *setArgsText -> the setArgsText
 *        size_t setArgsTextLen -> length of the setArgsText
 *  Rets: strTextMultiple_t* -> response text in allocated memory, NULL=no text
 * -------------------------------------------------------------------------------------------------
 */
strTextMultiple_t* ICACHE_FLASH_ATTR
BMP180_Set(Common_Definition_t* Common_Definition
	,uint8_t *setArgsText
	,size_t setArgsTextLen)
{

  // for Fn response msg
  strTextMultiple_t *retMsg = NULL;

  // make common ptr to modul specific ptr
  BMP180_Definition_t* BMP180_Definition =
	(BMP180_Definition_t*) Common_Definition;

  #if BMP180_Module_DBG >= 5
  printf("\n|BMP180_Set, Name:%.*s, got args:%.*s>"
	,BMP180_Definition->common.nameLen
	,BMP180_Definition->common.name
	,setArgsTextLen
	,setArgsText);
  #endif

// ------------------------------------------------------------------------------------------------

  // note: _Set Fn call not allowed with setArgsTextLen = 0 (CHECK!)

  // setArgsText '?' -> respond with help
  if ( (setArgsTextLen > 0) && (*setArgsText == '?') ) {

	// set start of possible Type-Name
	const uint8_t *tempTxt = setArgsText + 1;

	// a seek-counter
	int i = 1;

	// skip spaces after '?' (search for more ...)
	while( (i < setArgsTextLen) && (*tempTxt == ' ') ) {i++;tempTxt++;}

	// only spaces after '?' -> answer with Set-Capabilities
	if (i == setArgsTextLen) {

		// response with error text
		// alloc mem for retMsg
		retMsg = malloc(sizeof(strTextMultiple_t));

		// response with error text
		retMsg->strTextLen = asprintf(&retMsg->strText
			,"requested ? '%.*s' !"
			,setArgsTextLen
			,setArgsText);

		return retMsg;

		}
	// '? + X' here !!! -> normal parse
	}

// ------------------------------------------------------------------------------------------------

  // Parse set-args (KEY=VALUE) protocol -> gets parsedKVInput in allocated mem, NULL = ERROR
  parsedKVInputArgs_t *parsedKVInput = 
	SCDEFn_at_BMP180_M->ParseKVInputArgsFn(BMP180_SET_IK_Number_of_keys	// Num Implementated KEYs MAX for Set Fn
	,BMP180_Set_ImplementedKeys		// Implementated Keys for Set Fn
	,setArgsText				// our args text
	,setArgsTextLen);			// our args text len

  // parsing may report an problem. args contain: unknown keys, double keys, ...?
  if (!parsedKVInput) {

	// alloc mem for retMsg
	retMsg = malloc(sizeof(strTextMultiple_t));

	// response with error text
	retMsg->strTextLen = asprintf(&retMsg->strText
		,"Parsing Error! Args '%.*s' not taken! Check the KEYs!"
		,setArgsTextLen
		,setArgsText);

	return retMsg;
  }

// ------------------------------------------------------------------------------------------------

  // set required Keys -> Keys that should be there in this request
  parsedKVInput->requiredKVBF = 0;

  // set forbidden Keys -> Keys that are not allowed in this request
//  parsedKVInput->forbiddenKVBF = ( (1 << BMP180_SET_CNT_UNIT) );
  parsedKVInput->forbiddenKVBF = 0;

  // process the set-args (key=value@) protocol
  if (BMP180_ProcessKVInputArgs(BMP180_Definition
	,parsedKVInput				// KVInput parsed
	,setArgsText				// our args text
	,setArgsTextLen) ) {			// our args text len

 	// Processing reports an problem. Args not taken. Response with error text.

	// alloc mem for retMsg
	retMsg = malloc(sizeof(strTextMultiple_t));

	// response with error text
	retMsg->strTextLen = asprintf(&retMsg->strText
		,"Processing Error! Args '%.*s' not taken! Check the VALUEs!"
		,setArgsTextLen
		,setArgsText);

	// free allocated memory for query result key-field
	free(parsedKVInput);

	return retMsg;
  }

// ------------------------------------------------------------------------------------------------

  // set affected readings
  BMP180_SetAffectedReadings(BMP180_Definition
	,parsedKVInput->affectedReadingsBF);

// ---------------------

  // free allocated memory for query result key-field
  free(parsedKVInput);

  return retMsg;

}



/**
 * --------------------------------------------------------------------------------------------------
 *  FName: BMP180_Shutdown
 *  Desc: called after 
 *  Info: Invoked by cmd-line 'Undefine BMP180_Definition.common.Name'
 *  Para: BMP180_Definition_t *BMP180_Definition -> WebIF Definition that should be removed
 *  Rets: strTextMultiple_t* -> response text NULL=no text
 * --------------------------------------------------------------------------------------------------
 */
strTextMultiple_t* ICACHE_FLASH_ATTR
BMP180_Shutdown(Common_Definition_t *Common_Definition)
{

  // for Fn response msg
  strTextMultiple_t *retMsg = NULL;

  // make common ptr to modul specific ptr
  BMP180_Definition_t* BMP180_Definition =
	(BMP180_Definition_t*) Common_Definition;

// -------------------------------------------------------------------------------------------------

  #if BMP180_Module_DBG >= 5
  printf("\n|BMP180_Shutdown, Name:%.*s>"
	,BMP180_Definition->common.nameLen
	,BMP180_Definition->common.name);
  #endif

// -------------------------------------------------------------------------------------------------

  return retMsg;

}



/**
 * --------------------------------------------------------------------------------------------------
 *  FName: BMP180_Undefine
 *  Desc: Removes the define of an "device" of 'WebIF' type. Contains devicespecific init code.
 *  Info: Invoked by cmd-line 'Undefine ESP32Control_Definition.common.Name'
 *  Para: ESP32Control_Definition_t *ESP32Control_Definition -> WebIF Definition that should be removed
 *  Rets: strTextMultiple_t* -> response text NULL=no text
 * --------------------------------------------------------------------------------------------------
 */
strTextMultiple_t* ICACHE_FLASH_ATTR
BMP180_Undefine(Common_Definition_t *Common_Definition)
{

  // for Fn response msg
  strTextMultiple_t *retMsg = NULL;

  // make common ptr to modul specific ptr
  BMP180_Definition_t* BMP180_Definition =
	(BMP180_Definition_t*) Common_Definition;

  #if BMP180_Module_DBG >= 5
  printf("\n|BMP180_Undefine, Name:%.*s>"
	,BMP180_Definition->common.nameLen
	,BMP180_Definition->common.name);

  #endif


  // response with error text
	// alloc mem for retMsg
  retMsg = malloc(sizeof(strTextMultiple_t));

  // response with error text
  retMsg->strTextLen = asprintf(&retMsg->strText
	,"BMP180_Undefine, Name:%.*s"
	,BMP180_Definition->common.nameLen
	,BMP180_Definition->common.name);

  return retMsg;

}



/*
 * -------------------  helpers provided to module for type operation ------------------------------
 */



/**
 * -------------------------------------------------------------------------------------------------
 *  FName: BMP180_ProcessKVInputArgs
 *  Desc: Processes the KEY=VALUE input from Args. Information is pre-parsed to *parsedKVInput
 *  Info: .requiredKV -> Keys that should be there / .forbiddenKV -> Keys that are not allowed
 *  Para: BMP180_Definition_t *BMP180_Definition -> Definition that should get the input
 *        parsedKVInputArgs_t *parsedKVInput -> ptr to allocated mem filled with results from parse
 *        uint8_t *argsText -> the ArgsText
 *        size_t argsTextLen -> length of the ArgsText
 *  Rets: Bool -> TRUE = input parsed successful, FALSE = input parsed, but NOT successful, CANCELED
 * -------------------------------------------------------------------------------------------------
 */
bool ICACHE_FLASH_ATTR
BMP180_ProcessKVInputArgs(BMP180_Definition_t *BMP180_Definition
	,parsedKVInputArgs_t *parsedKVInput
	,uint8_t *argsText
	,size_t argsTextLen)
{

// 1. Step: Prepare structures with current values from TYPE & SYSTEM 
//          (to allow an abort if values not complete or in case of processing errors)
/*
  // block #1 get current assigned PWM-Block (low speed / high speed)
  uint8_t newBlock = BMP180_Definition->Block;

  // block #2 get current assigned PWM Channel
  uint8_t newChannel = BMP180_Definition->Channel;

  // block #3 get current assigned PWM Timer
  uint8_t newTimer = BMP180_Definition->Timer;
*/
// ------------------------------------------------------------------------------------------------
  /*
  // we need to process the 'Block' KEY in advance here, because we need this information early

  // Block=High_Speed|Low_Speed
  // -> Setzt den Hardware-PWM-Block des ESP32 (0=HighSpeed / 1= LowSpeed) der verwendet werden soll
  // -> Sets the hardware-PWM-Block of the ESP32 (0=HighSpeed / 1= LowSpeed) that should be used
  if (parsedKVInput->keysFoundBF & ( (uint64_t) 1 << BMP180_SET_BLOCK) ) {

	// valid input happened ?
	if (SCDEH_GetQueryKeyID((uint8_t*) argsText + parsedKVInput->keyData_t[BMP180_SET_BLOCK].off
		,parsedKVInput->keyData_t[BMP180_SET_BLOCK].len, &newBlock, BMP180_PWM_BLOCK)
		&& (newBlock <= 1) ) {
*/
/*

		// save new value, from input
		SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].ATTShiftBuf[0]
			= NewVal;

		// save mirror
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// mark affected readings for TX
		affectedReadings |= QueryResultKF->KeyField_Data_t[S0_QF_att].affectedReadings;


		// New Timestamp
		SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=att");


*/
/*
		}

	// invalid input detected ?
	else return true;
  }
*/
// ------------------------------------------------------------------------------------------------
  
  // we need to process the 'CHANNEL' KEY in advance here, because we need this information early

  // CHANNEL=[0-7]
  // -> Setzt den Hardware-PWM-Kanal des ESP32 (0-7) der verwendet werden soll
  // -> Sets the hardware-pwm-channel of the ESP32 (0-7) that should be used
/*
  if (parsedKVInput->keysFoundBF & ( (uint64_t) 1 << BMP180_SET_CHANNEL) ) {

	// valid input happened ?
	if (SCDEH_GetDecUInt8Val((uint8_t*) argsText + parsedKVInput->keyData_t[BMP180_SET_CHANNEL].off
		,parsedKVInput->keyData_t[BMP180_SET_CHANNEL].len, &newChannel) 
		&& (newChannel <= 7) ) {
*/
/*

		// save new value, from input
		SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].ATTShiftBuf[0]
			= NewVal;

		// save mirror
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// mark affected readings for TX
		affectedReadings |= QueryResultKF->KeyField_Data_t[S0_QF_att].affectedReadings;


		// New Timestamp
		SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=att");


*/
/*
		}

	// invalid input detected ?
	else return true;
  }
*/
// ------------------------------------------------------------------------------------------------
/*  
  // we need to process the 'TIMER' KEY in advance here, because we need this information early

  // TIMER=[0-3]
  // -> Setzt den Hardware-Timer für den gewählten PWM-Kanal des ESP32 (0-3) der verwendet werden soll
  // -> Sets the hardware-timer for the choosen pwm-channel of the ESP32 (0-3) that should be used
  if (parsedKVInput->keysFoundBF & ( (uint64_t) 1 << BMP180_SET_TIMER) ) {

	// valid input happened ?
	if (SCDEH_GetDecUInt8Val((uint8_t*) argsText + parsedKVInput->keyData_t[BMP180_SET_TIMER].off
		,parsedKVInput->keyData_t[BMP180_SET_TIMER].len, &newTimer) 
		&& (newTimer <= 3) ) {
*/
/*

		// save new value, from input
		SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].ATTShiftBuf[0]
			= NewVal;

		// save mirror
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// mark affected readings for TX
		affectedReadings |= QueryResultKF->KeyField_Data_t[S0_QF_att].affectedReadings;


		// New Timestamp
		SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=att");


*/
/*
		}

	// invalid input detected ?
	else return true;
  }
*/
// ------------------------------------------------------------------------------------------------
/*
  // block #4 get current assigned / connected GPIO
  uint8_t newGPIO = BMP180_Definition->GPIO;

  // block #5 reserve for new ATT
  uint32_t newATTVal;

  // block #6 reserve for new AVU
  char newAverageUnit[3];	

  // block #7  get ESP32 PWM channel configuration from selected channel
  // this stores our temp values
  ESP32_PWM_Channel_t newPWM_Channel;
  // pointer to make the hardware counters accessible
  ESP32_PWM_Channel_t *pPWM_Channel =
	(ESP32_PWM_Channel_t*) (0x3FF59000 + (0x14 * newChannel));
  // access low speed channels (instead of high speed channels)?
  if (newBlock) pPWM_Channel =
	(ESP32_PWM_Channel_t*) ( (uint8_t*) pPWM_Channel + 0xa0);
  // move data to temp storage
  memcpy(&newPWM_Channel, pPWM_Channel, sizeof(ESP32_PWM_Channel_t));

  // block #8  get ESP32 PWM timer configuration from selected timer
  // this stores our temp values
  ESP32_PWM_Timer_t newPWM_Timer;
  // pointer to make the hardware timers accessible
  ESP32_PWM_Timer_t *pPWM_Timer =
	(ESP32_PWM_Timer_t*) (0x3FF59140 + (0x08 * newTimer));
  // access low speed timers (instead of high speed timers)?
  if (newBlock) pPWM_Timer =
	(ESP32_PWM_Timer_t*) ( (uint8_t*) pPWM_Timer + 0x20);
  // move data to temp storage
  memcpy(&newPWM_Timer, pPWM_Timer, sizeof(ESP32_PWM_Timer_t));


  // store choosen timer in choosen channel
  newPWM_Channel.TIMER_SEL = newTimer;

// ------------------------------------------------------------------------------------------------

// 2. Step: Process the possible input keys
*/












/*
//>Caps Bit 0---------------------------------------------------------------------------------------

  // on=[ ] -> Setze Kanal an (0-x)
  // on=[ ] -> Set channel on (0-x)

 if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SwITCH_QF_on)

	{

	// new val, save mirror
	SCDE_WriteUInt32toSysCfgRamRtcMirrored(&SysCfgRamRtcMirrored->MySwITCH_FeatCfgRamRtcMirrored[ADID].RB01_Val,
		SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_SwValMax);

	// mark affected readings for TX
	AffectedReadings |= QueryResultKF->KeyField_Data_t[SwITCH_QF_on].AffectedReadings;

	// New Timestamp
	SysCfgRamNoMirror->MySwITCH_FeatCfgRamNoMirror[ADID].RB01_X_TiSt =
		GetUniqueTIST();

	// Push processed CMD to to Response ...
	RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=on");

	}

//--------------------------------------------------------------------------------------------------

  // off=[ ] -> Setze Kanal aus (0-x)
  // off=[ ] -> Set channel off (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SwITCH_QF_off)

	{

	// new val, save mirror
	SCDE_WriteUInt32toSysCfgRamRtcMirrored(&SysCfgRamRtcMirrored->MySwITCH_FeatCfgRamRtcMirrored[ADID].RB01_Val,
		SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_SwValMin);

	// mark affected readings for TX
	AffectedReadings |= QueryResultKF->KeyField_Data_t[SwITCH_QF_off].AffectedReadings;

	// New Timestamp
	SysCfgRamNoMirror->MySwITCH_FeatCfgRamNoMirror[ADID].RB01_X_TiSt =
		GetUniqueTIST();

	// Push processed CMD to to Response ...
	RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=off");

	}

//>Caps Bit 1---------------------------------------------------------------------------------------

  // max=[ ] -> Setze Kanal maximal (0-x)
  // max=[ ] -> Set channel maximum (0-x) 

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SwITCH_QF_max)

	{

	// new val, save mirror
	SCDE_WriteUInt32toSysCfgRamRtcMirrored(&SysCfgRamRtcMirrored->MySwITCH_FeatCfgRamRtcMirrored[ADID].RB01_Val,
		SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_SwValMax);

	// mark affected readings for TX
	AffectedReadings |= QueryResultKF->KeyField_Data_t[SwITCH_QF_max].AffectedReadings;

	// New Timestamp
	SysCfgRamNoMirror->MySwITCH_FeatCfgRamNoMirror[ADID].RB01_X_TiSt =
		GetUniqueTIST();

	// Push processed CMD to to Response ...
	RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=max");

	}

//--------------------------------------------------------------------------------------------------

  // min=[ ] -> Setze Kanal minimal (0-x)
  // min=[ ] -> Set channel minimal (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SwITCH_QF_min)

	{

	// New Value = Min
	SCDE_WriteUInt32toSysCfgRamRtcMirrored(&SysCfgRamRtcMirrored->MySwITCH_FeatCfgRamRtcMirrored[ADID].RB01_Val,
		SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_SwValMin);

	// mark affected readings for TX
	AffectedReadings |= QueryResultKF->KeyField_Data_t[SwITCH_QF_min].AffectedReadings;

	// New Timestamp
	SysCfgRamNoMirror->MySwITCH_FeatCfgRamNoMirror[ADID].RB01_X_TiSt =
		GetUniqueTIST();

	// Push processed CMD to to Response ...
	RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=min");

	}

//>Caps Bit 2---------------------------------------------------------------------------------------

  // val=[0-9] -> Setze Wert für Kanal (uint8) (0-x)
  // val=[0-9] -> Set value for channel (uint8) (0-x)

 else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SwITCH_QF_val)
	{

	uint32_t NewVal;

	// valid input happened ?
	if (SCDEH_GetDecUInt32Val((uint8*)Args+QueryResultKF->KeyField_Data_t[SwITCH_QF_val].off
		,QueryResultKF->KeyField_Data_t[SwITCH_QF_val].len, &NewVal))

		{

		// val input value clipping
		if (NewVal > SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_SwValMax)

			{

			NewVal = SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_SwValMax;

			}

		else if (NewVal < SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_SwValMin)

			{

			NewVal = SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_SwValMin;

			}

		// save mirror
		SCDE_WriteUInt32toSysCfgRamRtcMirrored(&SysCfgRamRtcMirrored->MySwITCH_FeatCfgRamRtcMirrored[ADID].RB01_Val,
			NewVal);

		// mark affected readings for TX
		AffectedReadings |= QueryResultKF->KeyField_Data_t[SwITCH_QF_val].AffectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MySwITCH_FeatCfgRamNoMirror[ADID].RB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=val");

		}

	}

//>Caps Bit 3---------------------------------------------------------------------------------------

  // dim=[0-9] -> Setze dimmer für Kanal (uint8) (0-x)
  // dim=[0-9] -> Set dimming for channel (uint8) (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SwITCH_QF_dim)
	{

	uint32_t NewVal;

	// valid input happened ?
	if (SCDEH_GetDecUInt32Val((uint8*)Args+QueryResultKF->KeyField_Data_t[SwITCH_QF_dim].off
		,QueryResultKF->KeyField_Data_t[SwITCH_QF_dim].len, &NewVal))
		
		{

		// dim input value clipping
		if (NewVal > 100) NewVal = 100;
		else if (NewVal < 0) NewVal = 0;

		// calculate val from dim
		NewVal = ( (NewVal *
			(SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_SwValMax - 
			SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_SwValMin) ) /
			100 );

		// New Value = calculated from input
		SCDE_WriteUInt32toSysCfgRamRtcMirrored(&SysCfgRamRtcMirrored->MySwITCH_FeatCfgRamRtcMirrored[ADID].RB01_Val,
			NewVal);

		// save mirror
		AffectedReadings |= QueryResultKF->KeyField_Data_t[SwITCH_QF_dim].AffectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MySwITCH_FeatCfgRamNoMirror[ADID].RB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=dim");

		}

	}

//>Caps Bit n.a.------------------------------------------------------------------------------------

  // name=[a-zA-Z0-9_.] -> Setze einen neuen Feature Namen (char[31]) (0-x)
  // name=[a-zA-Z0-9_.] -> Set a new Feature Name (char[31]) (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SwITCH_QF_name)

	{

	// valid input happened ?
	if (SCDEH_GetSpecialStrVal((uint8_t*)Args+QueryResultKF->KeyField_Data_t[SwITCH_QF_name].off
		,QueryResultKF->KeyField_Data_t[SwITCH_QF_name].len
		,(char*) &SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_Name
		,sizeof (SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_Name)
		,2) )

		{	

		// save mirror
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// mark affected readings for TX
		AffectedReadings |= QueryResultKF->KeyField_Data_t[SwITCH_QF_name].AffectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MySwITCH_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=name");

		}

	}

//>Caps Bit n.a.------------------------------------------------------------------------------------

  // caps=[ ] -> Fragt nach den Fähigkeiten-Bits (0-x)
  // caps=[ ] -> Request for Capabilities-Bits (0-x)

 if (QueryResultKF->KeyField_Set == (uint64_t) 1 << SwITCH_QF_caps)

	{

	// mark affected readings for TX
	AffectedReadings |= QueryResultKF->KeyField_Data_t[SwITCH_QF_caps].AffectedReadings;

	// New Timestamp
	SysCfgRamNoMirror->MySwITCH_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
		GetUniqueTIST();

	// Push processed CMD to to Response ...
	RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=on");

	}

*/

/*
  // ATT=[0-9]
  // -> Setze Allzeit-Gesamt-Impulse passend zum aktuellen Zählerstand
  // -> Set alltime-total-tics meeting the currend meter-reading

  if (parsedKVInput->keysFoundBF & ( (uint64_t) 1 << BMP180_SET_ATT) ) {

	// valid input happened ?
	if (SCDEH_GetDecUInt32Val((uint8*)Args+QueryResultKF->KeyField_Data_t[S0_QF_att].off
		,QueryResultKF->KeyField_Data_t[S0_QF_att].len, &newATTVal)) {





		// save new value, from input
		SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].ATTShiftBuf[0]
			= newATTVal;

		// save mirror
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// mark affected readings for TX
		affectedReadings |= QueryResultKF->KeyField_Data_t[S0_QF_att].affectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=att");

		}

	// invalid input detected ?
	else return true;
  }

//>Caps Bit 1,2,3,4,5,6-----------------------------------------------------------------------------

  // AVU=[a-zA-Z0-9_.]
  // -> Setze Einheit für den Durchschnitts-Verbrauchs-Wert (char[3])
  // -> Set unit for average-consumption-value (char[3])

  if (parsedKVInput->keysFoundBF & ( (uint64_t) 1 << BMP180_SET_AVU) ) {

	// valid input happened ?
	if (SCDEH_GetSpecialStrVal((uint8_t*)Args+QueryResultKF->KeyField_Data_t[S0_QF_avu].off
		,QueryResultKF->KeyField_Data_t[S0_QF_avu].len
		,(char*) &newAverageUnit
		,sizeof (newAverageUnit) // -> case 3 = (Alpha+Num+"³") for Unit Name
		,3) ) {


		// SAVE Value
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// mark affected readings for TX
		affectedReadings |= QueryResultKF->KeyField_Data_t[S0_QF_avu].affectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=avu");

		}

	// invalid input detected ?
	else return true;
  }

//>Caps Bit 1---------------------------------------------------------------------------------------

  // AVF=[0-9.]
  // -> Setze Durchschnittsverbrauch Berechnungsfaktor (float)
  // -> Set average consumption calculation factor (float)

  if (parsedKVInput->keysFoundBF & ( (uint64_t) 1 << BMP180_SET_AVF) ) {

	double NewVal;

	// valid input happened ?
	if (SCDEH_GetFloatVal((uint8*)Args+QueryResultKF->KeyField_Data_t[S0_QF_avf].off
		,QueryResultKF->KeyField_Data_t[S0_QF_avf].len, &NewVal)) {

		// store the value to temp
		//befehl hier!;


		// save new value, from input
		SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_AverageFactor
			= NewVal;

		// save mirror
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// mark affected readings for TX
		affectedReadings |= QueryResultKF->KeyField_Data_t[S0_QF_avf].affectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=avf");

		}

	// invalid input detected ?
	else return true;
  }

//--------------------------------------------------------------------------------------------------

  // ATU=[a-zA-Z0-9_.]
  // -> Setze Einheit für den Allzeit-Gesamt-Wert (char[3])
  // -> Set unit for alltime-total-value (char[3])

  if (parsedKVInput->keysFoundBF & ( (uint64_t) 1 << BMP180_SET_ATU) ) {

	// valid input happened ?
	if (SCDEH_GetSpecialStrVal((uint8_t*)Args+QueryResultKF->KeyField_Data_t[S0_QF_atu].off
		,QueryResultKF->KeyField_Data_t[S0_QF_atu].len
		,(char*) &SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_AlltimeTotalUnit
		,sizeof (SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_AlltimeTotalUnit)
		,3) ) // -> case 3 = (Alpha+Num+"³") for Unit Name

		 {

		// store the value to temp
		//befehl hier!;



		// SAVE Value
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// mark affected readings for TX
		affectedReadings |= QueryResultKF->KeyField_Data_t[S0_QF_atu].affectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=atu");

		}

	// invalid input detected ?
	else return true;
  }

//>Caps Bit 2---------------------------------------------------------------------------------------

  // ATF=[0-9.]
  // -> Setze Umrechnungsfaktor für den Allzeit-Total-Wert (float)
  // -> Set factor for alltime total value (float)

  if (parsedKVInput->keysFoundBF & ( (uint64_t) 1 << BMP180_SET_ATF) ) {

	double NewVal;

	// valid input happened ?
	if (SCDEH_GetFloatVal((uint8*)Args+QueryResultKF->KeyField_Data_t[S0_QF_atf].off
		,QueryResultKF->KeyField_Data_t[S0_QF_atf].len, &NewVal)) {

		// store the value to temp
		//befehl hier!;



		// save new value, from input
		SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_AlltimeTotalFactor
			= NewVal;

		// save mirror
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// mark affected readings for TX
		affectedReadings |= QueryResultKF->KeyField_Data_t[S0_QF_atf].affectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=atf");

		}

	// invalid input detected ?
	else return true;
  }


*/














//> ------------------------------------------------------------------------------------------------
/*
  // CH1_LCTRL_MODE=no_modification|invert|inhibit_modification
  // -> ?? Setzt den Hardware-Counter des ESP32 (0-7) der verwendet werden soll
  // -> ?? Sets the hardware counter of the ESP32 (0-7) that should be used
  if (parsedKVInput->keysFoundBF & ( (uint64_t) 1 << BMP180_SET_CH1_LCTRL_MODE) ) {

	uint8_t newMode;

	// valid input happened ?
	if (SCDEH_GetQueryKeyID((uint8_t*) argsText + parsedKVInput->keyData_t[BMP180_SET_CH1_LCTRL_MODE].off
		,parsedKVInput->keyData_t[BMP180_SET_CH1_LCTRL_MODE].len, &newMode, &BMP180_CTRL_MODE)
		&& (newMode <= 3) ) {

		// store the value to temp
		BMP180_CNT_CONF_REG.CNT_CH1_LCTRL_MODE = newMode;



		// save new value, from input
		SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].ATTShiftBuf[0]
			= NewVal;

		// save mirror
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// mark affected readings for TX
		affectedReadings |= QueryResultKF->KeyField_Data_t[S0_QF_att].affectedReadings;


		// New Timestamp
		SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=att");


		}

	// invalid input detected ?
	else return true;
  }
*/





















/*

//>Caps Bit 3---------------------------------------------------------------------------------------

  // deb=[0-9] -> Setze debounce Wert, 10-200 recommended (0-x)
  // deb=[0-9] -> Set debounce value, 10-200 recommended (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << S0_QF_deb)

	{

	uint32_t NewVal;

	// valid input happened ?
	if (SCDEH_GetDecUInt32Val((uint8*)Args+QueryResultKF->KeyField_Data_t[S0_QF_deb].off
		,QueryResultKF->KeyField_Data_t[S0_QF_deb].len, &NewVal))

		{

		// deb input value clipping
		if (NewVal > 1000) NewVal = 1000;
		else if (NewVal < 0) NewVal = 10;

		// save new value, from input
		SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_Debounce
			= NewVal;

		// save mirror
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// mark affected readings for TX
		affectedReadings |= QueryResultKF->KeyField_Data_t[S0_QF_deb].affectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=deb");

		}

	}


//>Caps Bit n.a.------------------------------------------------------------------------------------

  // name=[a-zA-Z0-9_.] -> Setze einen neuen Feature Namen (char[31]) (0-x)
  // name=[a-zA-Z0-9_.] -> Set a new Feature Name (char[31]) (0-x)

  else if (QueryResultKF->KeyField_Set == (uint64_t) 1 << S0_QF_name)

	{

	// valid input happened ?
	if (SCDEH_GetSpecialStrVal((uint8_t*)Args+QueryResultKF->KeyField_Data_t[S0_QF_name].off
		,QueryResultKF->KeyField_Data_t[S0_QF_name].len
		,(char*) &SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_Name
		,sizeof (SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_Name)
		,2) ) // NAME=[a-zA-Z0-9_.] -> Set a new Feature Name (char[31]) (0-x)

		{	

		// SAVE Value
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// mark affected readings for TX
		affectedReadings |= QueryResultKF->KeyField_Data_t[S0_QF_name].affectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=name");

		}

	}

//>Caps Bit n.a.------------------------------------------------------------------------------------

  // caps=[ ] -> Fragt nach den Fähigkeiten-Bits (0-x)
  // caps=[ ] -> Request for Capabilities-Bits (0-x)


 if (QueryResultKF->KeyField_Set == (uint64_t) 1 << S0_QF_caps)
	{

	// mark affected readings for TX
	affectedReadings |= QueryResultKF->KeyField_Data_t[S0_QF_caps].affectedReadings;

//	// New Timestamp
//	WriteInt32toSysCfgRamRtcMirrored(&SysCfgRamRtcMirrored->MyS0FeatureCfgRamRtcMirrored[ADID].IB01_X_TiSt,
//		GetUniqueTIST());

	// Push processed CMD to to Response ...
	RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=caps");

	}

*/








//> ------------------------------------------------------------------------------------------------
/*
  // CH1_LCTRL_MODE=no_modification|invert|inhibit_modification
  // -> ?? Setzt den Hardware-Counter des ESP32 (0-7) der verwendet werden soll
  // -> ?? Sets the hardware counter of the ESP32 (0-7) that should be used
  if (parsedKVInput->keysFoundBF & ( (uint64_t) 1 << BMP180_SET_CH1_LCTRL_MODE) ) {

	uint8_t newMode;

	// valid input happened ?
	if (SCDEH_GetQueryKeyID((uint8_t*) argsText + parsedKVInput->keyData_t[BMP180_SET_CH1_LCTRL_MODE].off
		,parsedKVInput->keyData_t[BMP180_SET_CH1_LCTRL_MODE].len, &newMode, &BMP180_CTRL_MODE)
		&& (newMode <= 3) ) {

		// store the value to temp
		BMP180_CNT_CONF_REG.CNT_CH1_LCTRL_MODE = newMode;



		// save new value, from input
		SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].ATTShiftBuf[0]
			= NewVal;

		// save mirror
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// mark affected readings for TX
		affectedReadings |= QueryResultKF->KeyField_Data_t[S0_QF_att].affectedReadings;


		// New Timestamp
		SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=att");


		}

	// invalid input detected ?
	else return true;
  }
*/
//> ------------------------------------------------------------------------------------------------
/*
  // CH1_HCTRL_MODE=no_modification|invert|inhibit_modification
  // -> ?? Setzt den Hardware-Counter des ESP32 (0-7) der verwendet werden soll
  // -> ?? Sets the hardware counter of the ESP32 (0-7) that should be used
  if (parsedKVInput->keysFoundBF & ( (uint64_t) 1 << BMP180_SET_CH1_HCTRL_MODE) ) {

	uint8_t NewMode;

	// valid input happened ?
	if (SCDEH_GetQueryKeyID((uint8_t*) argsText + parsedKVInput->keyData_t[BMP180_SET_CH1_HCTRL_MODE].off
		,parsedKVInput->keyData_t[BMP180_SET_CH1_HCTRL_MODE].len, &NewMode, BMP180_CTRL_MODE) ) {

		// store ne value
		BMP180_CNT_CONF_REG.CNT_CH1_LCTRL_MODE = NewMode;


		// save new value, from input
		SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].ATTShiftBuf[0]
			= NewVal;

		// save mirror
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// mark affected readings for TX
		affectedReadings |= QueryResultKF->KeyField_Data_t[S0_QF_att].affectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=att");


		}

	// invalid input detected ?
	else return true;
  }
*/
//> ------------------------------------------------------------------------------------------------
/*
  // CH1_POS_MODE=no_effect|inc_counter|dec_counter
  // -> ?? Setzt den Hardware-Counter des ESP32 (0-7) der verwendet werden soll
  // -> ?? Sets the hardware counter of the ESP32 (0-7) that should be used
  if (parsedKVInput->keysFoundBF & ( (uint64_t) 1 << BMP180_SET_CH1_POS_MODE) ) {

	uint8_t NewMode;

	// valid input happened ?
	if (SCDEH_GetQueryKeyID((uint8_t*) argsText + parsedKVInput->keyData_t[BMP180_SET_CH1_POS_MODE].off
		,parsedKVInput->keyData_t[BMP180_SET_CH1_POS_MODE].len, &NewMode, BMP180_CH_MODE) ) {

		// store ne value
		BMP180_CNT_CONF_REG.CNT_CH1_POS_MODE = NewMode;


		// save new value, from input
		SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].ATTShiftBuf[0]
			= NewVal;

		// save mirror
		SCDE_SaveSysCfgRamFlashMirroredToMirror();

		// mark affected readings for TX
		affectedReadings |= QueryResultKF->KeyField_Data_t[S0_QF_att].affectedReadings;

		// New Timestamp
		SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].IB01_X_TiSt =
			GetUniqueTIST();

		// Push processed CMD to to Response ...
		RespArgsWPos += os_sprintf(RespArgsWPos,"cmd=att");


		}

	// invalid input detected ?
	else return true;
  }
*/







// ------------------------------------------------------------------------------------------------

// 3. Step: Check if the ammount of input elements meets our criteria

  // check if all required Key=Value components are included -> return with FALSE
  if ( (parsedKVInput->keysFoundBF & parsedKVInput->requiredKVBF) != parsedKVInput->requiredKVBF) {

	#if BMP180_Module_DBG >= 5
	printf("|requiredKVBF, no match!>");	
  	#endif

	return true;
  }

  // check if forbidden Key=Value components are included -> return with FALSE
  if (parsedKVInput->keysFoundBF & parsedKVInput->forbiddenKVBF) {

	#if BMP180_Module_DBG >= 5
	printf("|forbiddenKVBF, match!>");	
  	#endif

	return true;
  }

// ------------------------------------------------------------------------------------------------

// 4. Step: Passed. Store the new values
/*
  // block #1 store assigned PWM-Block (low speed / high speed)
  if (parsedKVInput->keysFoundBF | ( (1 << BMP180_SET_BLOCK) ) ) {

	#if BMP180_Module_DBG >= 5
	printf("|W B#01 PWM_Block=%d>"
		,newBlock);	
  	#endif

	// store assigned PWM-Block
	BMP180_Definition->Block = newBlock;
  }

  // block #2 store assigned PWM Channel
  if (parsedKVInput->keysFoundBF | ( (1 << BMP180_SET_CHANNEL) ) ) {

	#if BMP180_Module_DBG >= 5
	printf("|W B#02 PWM_Channel=%d>"
		,newChannel);	
  	#endif

	// store assigned PWM Channel
	BMP180_Definition->Channel = newChannel;
  }

  // block #3 store assigned PWM Timer
  if (parsedKVInput->keysFoundBF | ( (1 << BMP180_SET_TIMER) ) ) {

	#if BMP180_Module_DBG >= 5
	printf("|W B#03 PWM_Timer=%d>"
		,newTimer);	
  	#endif

	// store assigned PWM Timer
	BMP180_Definition->Timer = newTimer;
  }

  // block #4 store assigned / connected GPIO
  if (parsedKVInput->keysFoundBF | ( (1 << BMP180_SET_GPIO) ) ) {

	#if BMP180_Module_DBG >= 5
	printf("|W B#04 PWM_GPIO=%d>"
		,newGPIO);	
  	#endif

	// store assigned GPIO
	BMP180_Definition->GPIO = newGPIO;

	PIN_FUNC_SELECT(GPIO_PIN_MUX_REG[newGPIO], PIN_FUNC_GPIO);

	// set GPIO as output
	gpio_set_direction(newGPIO, GPIO_MODE_OUTPUT);

	// configure for high-speed or low-speed ?
	if (newBlock) {

		// setup gpio matrix for low speed
	}

	else {

		// setup gpio matrix for high speed
		gpio_matrix_out(newGPIO, LEDC_HS_SIG_OUT0_IDX + newChannel, 0, 0);
		
	}
  }

  // block #5 store ESP32 pwm configuration registers
  if (parsedKVInput->keysFoundBF & ( (1 << BMP180_SET_TIMER)
				   | (1 << BMP180_SET_SIG_OUT_EN)
				   | (1 << BMP180_SET_IDLE_LV)
				   | (1 << BMP180_SET_HPOINT)
				   | (1 << BMP180_SET_DUTY) ) ) {




	// store ESP32 PWM configuration registers
	memcpy(pPWM_Channel, &newPWM_Channel, sizeof(ESP32_PWM_Channel_t));

	# if BMP180_Module_DBG >= 5
	printf("|ESP32_PWM_Channel_s addr=%p>"
		,pPWM_Channel);

	SCDEFn_at_BMP180_M->HexDumpOutFn ("dump"
		,pPWM_Channel
		, sizeof(ESP32_PWM_Channel_t) );
	# endif
  }

  // block #6 store ESP32 pwm-timer configuration registers
  if (parsedKVInput->keysFoundBF & ( (1 << BMP180_SET_TIMER)
				   | (1 << BMP180_SET_RESOLUTION )
				   | (1 << BMP180_SET_TICK_SOURCE)
			   	   | (1 << BMP180_SET_FREQ_HZ) ) ) {

	// reset? It seems that a reset is needed to start timer
	newPWM_Timer.RESET = 0;

	// low speed timer? -> needs 'LOW_SPEED_UPDATE' bit set to take settings
	if (!newBlock) newPWM_Timer.LOW_SPEED_UPDATE = 1;

	// store ESP32 timer configuration registers
	memcpy(pPWM_Timer, &newPWM_Timer, sizeof(ESP32_PWM_Timer_t));

	# if BMP180_Module_DBG >= 5
	printf("|ESP32_PWM_Timer_s addr=%p>"
		,pPWM_Timer);

	SCDEFn_at_BMP180_M->HexDumpOutFn ("dump"
		,pPWM_Timer
		, sizeof(ESP32_PWM_Timer_t) );
	# endif
  }
*/
  return false;

}

















/*
//>Add Readings Bit 00 -----------------------------------------------------------------------------

  if (AffectedReadings & SwITCH_R_val)

	{

	RespArgsWPos += os_sprintf(RespArgsWPos,
		"&val=%u",(uint) SysCfgRamRtcMirrored->MySwITCH_FeatCfgRamRtcMirrored[ADID].RB01_Val);

	}

//>Add Readings Bit 01 -----------------------------------------------------------------------------

  if (AffectedReadings & SwITCH_R_dim)

	{

	RespArgsWPos += os_sprintf(RespArgsWPos,
		"&dim=%u",(100 *
		(SysCfgRamRtcMirrored->MySwITCH_FeatCfgRamRtcMirrored[ADID].RB01_Val -
		SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_SwValMin) / 
		(SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_SwValMax - 
		SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_SwValMin) ) );

	}

//>Add Readings Bit 02 -----------------------------------------------------------------------------

  if (AffectedReadings & SwITCH_R_name)

	{

	// add Unique-Feature-ID for identification purposes (Name-Change, ...)
	RespArgsWPos += SwITCH_UFID(RespArgsWPos, ADID);


	// add capabilities of this feature ...
	RespArgsWPos += os_sprintf(RespArgsWPos,
		"&caps=000F");						// 0b1111 <-16BIT-HEX

	// add current name of this feature
	RespArgsWPos += os_sprintf(RespArgsWPos,
		"&name=%s",SysCfgRamFlashMirrored->MySwITCH_FeatCfgRamFlashMirrored[ADID].IB01_Name);

	}

//>always add Reading - state ----------------------------------------------------------------------

	// are we adding ?
	if (RespArgsWPos) RespArgsWPos += os_sprintf(RespArgsWPos,"&");

	// always add state ! on / off
	if (SysCfgRamRtcMirrored->MySwITCH_FeatCfgRamRtcMirrored[ADID].RB01_Val == 0)
		RespArgsWPos += os_sprintf(RespArgsWPos, "state=off");

	else  RespArgsWPos += os_sprintf(RespArgsWPos, "state=on");

//--------------------------------------------------------------------------------------------------

*/
















/**
 * ------------------------------------------------------------------------------------------------
 *  FName: BMP180_SetAffectedReadings
 *  Desc: Do the readings update for this definition according to 'affectedReadings'
 *  Info: 
 *  Para: BMP180_Definition_t *BMP180_Definition -> Definition that should get the input
 *        uint64_t affectedReadings -> according to ...
 *  Rets: Bool -> TRUE = input parsed successful, FALSE = input parsed, but NOT successful, CANCELED
 * ------------------------------------------------------------------------------------------------
 */
bool ICACHE_FLASH_ATTR
BMP180_SetAffectedReadings(BMP180_Definition_t* BMP180_Definition
	,uint64_t affectedReadings)
{
/*
 affectedReadings = 0xfffffffffffffff;

  // do we have updates?
  if (affectedReadings) {

  SCDEFn_at_BMP180_M->readingsBeginUpdateFn((Common_Definition_t*) BMP180_Definition);

  }

  // we have no updates
  else return false;

// -----------------------------------------------------------------------------------------------

  // temp for reading creation
  uint8_t *readingNameText;
  size_t readingNameTextLen;
  uint8_t *readingValueText;
  size_t readingValueTextLen;

  // pointer to make the hardware counters accessible
  ESP32_PWM_Channel_t *pPWM_Channel =
	(ESP32_PWM_Channel_t*) (0x3FF59000 + (0x14 * BMP180_Definition->Channel));
  // access low speed channels (instead of high speed channels)?
  if (BMP180_Definition->Block) pPWM_Channel =
	(ESP32_PWM_Channel_t*) ( (uint8_t*) pPWM_Channel + 0xa0);

  // pointer to make the hardware timers accessible
  ESP32_PWM_Timer_t *pPWM_Timer =
	(ESP32_PWM_Timer_t*) (0x3FF59140 + (0x08 * BMP180_Definition->Timer));
  // access low speed timers (instead of high speed timers)?
  if (BMP180_Definition->Block) pPWM_Timer =
	(ESP32_PWM_Timer_t*) ( (uint8_t*) pPWM_Timer + 0x20);

//>Add Readings Bit 00 -----------------------------------------------------------------------------

  // add reading 'Duty'
  if (affectedReadings & BMP180_R_DUTY) {

	readingNameTextLen = asprintf((char **) &readingNameText
		,"Duty");

	readingValueTextLen = asprintf((char **) &readingValueText
		,"%u"
		,pPWM_Channel->DUTY);

	SCDEFn_at_BMP180_M->readingsBulkUpdateFn((Common_Definition_t*) BMP180_Definition
		,readingNameText
		,readingNameTextLen
		,readingValueText
		,readingValueTextLen);
  }

//>Add Readings Bit 01 -----------------------------------------------------------------------------

  // add reading 'Resolution'
  if (affectedReadings & BMP180_R_RESOLUTION) {

	readingNameTextLen = asprintf((char **) &readingNameText
		,"Resolution");

	readingValueTextLen = asprintf((char **) &readingValueText
		,"%u"
		,(1 << pPWM_Timer->RESOLUTION) );

	SCDEFn_at_BMP180_M->readingsBulkUpdateFn((Common_Definition_t*) BMP180_Definition
		,readingNameText
		,readingNameTextLen
		,readingValueText
		,readingValueTextLen);
  }
*/
//>Add Readings Bit 02 -----------------------------------------------------------------------------
/*
  if (affectedReadings & BMP180_R_AV01_AV05_AV15) {

	int ThisS0CounterCaps = 0b11100000000000000000000000000000;
	// Add readings depending on CAPS ...

	// AV01 = AVerage last 01 Min (calculated), zwingt AVF = AVerageFactor und AVU  = AVerageUnit	
	if (ThisS0CounterCaps & 0b10000000000000000000000000000000)	// AV01 Caps avail?

		{

		RespArgsWPos += os_sprintf(RespArgsWPos // 'AV01' -> AVerage01min (calculated)
			,"&av01=%d.%03d"
			,(int)(SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].RB01_Average01Min)	
			,(int)((SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].RB01_Average01Min - 
			 (int)SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].RB01_Average01Min)*1000) );

		}

	// AV05 = AVerage last 05 Min (calculated), zwingt AVF = AVerageFactor und AVU  = AVerageUnit		
	if (ThisS0CounterCaps & 0b01000000000000000000000000000000)	// AV05 Caps avail?

		{

		RespArgsWPos += os_sprintf(RespArgsWPos	// 'AV05' -> AVerage05min (calculated)
			,"&av05=%d.%03d"
			,(int)(SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].RB01_Average05Min)	
			,(int)((SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].RB01_Average05Min -
			 (int)SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].RB01_Average05Min)*1000) );

		}

	// AV15 = AVerage last 15 Min (calculated), zwingt AVF = AVerageFactor und AVU  = AVerageUnit
	if (ThisS0CounterCaps & 0b00100000000000000000000000000000)	// AV15 Caps avail?

		{

		RespArgsWPos += os_sprintf(RespArgsWPos	// 'AV15' -> AVerage15min (calculated)
			,"&av15=%d.%03d"
			,(int)(SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].RB01_Average15Min)	
			,(int)((SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].RB01_Average15Min -
			 (int)SysCfgRamNoMirror->MyS0_FeatCfgRamNoMirror[ADID].RB01_Average15Min)*1000) );	

		}

	}
*/
//>Add Readings Bit 03 -----------------------------------------------------------------------------
/*
  // add reading 'Average_Factor' //avf'
  if (affectedReadings & BMP180_R_AVF) {

	readingNameTextLen = asprintf((char **) &readingNameText
		,"Average_Factor");

	readingValueTextLen = asprintf((char **) &readingValueText
		,"%d.%04d"
		,(int) BMP180_Definition->IB01_AverageFactor	
		,(int) ( (BMP180_Definition->IB01_AverageFactor -
		(int) BMP180_Definition->IB01_AverageFactor) * 10000) );

	SCDEFn_at_BMP180_M->readingsBulkUpdateFn((Common_Definition_t*) BMP180_Definition
		,readingNameText
		,readingNameTextLen
		,readingValueText
		,readingValueTextLen);

  }
*/
//	RespArgsWPos += os_sprintf(RespArgsWPos
//		,"&avf=%d.%04d"
//		,(int)(SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_AverageFactor)	
//		,(int)((SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_AverageFactor -
//		(int)SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_AverageFactor)*10000) );


//>Add Readings Bit 04 -----------------------------------------------------------------------------
/*
  // add reading 'Average_Unit' //avu'
  if (affectedReadings & BMP180_R_AVU) {

	readingNameTextLen = asprintf((char **) &readingNameText
		,"Average_Unit");

	readingValueTextLen = asprintf((char **) &readingValueText
		,"%s"
		,BMP180_Definition->IB01_AverageUnit);

	SCDEFn_at_BMP180_M->readingsBulkUpdateFn((Common_Definition_t*) BMP180_Definition
		,readingNameText
		,readingNameTextLen
		,readingValueText
		,readingValueTextLen);

  }

*/
//	RespArgsWPos += os_sprintf(RespArgsWPos
//		,"&avu=%s"
//		,SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_AverageUnit);



//>Add Readings Bit 05 -----------------------------------------------------------------------------
/*
  // add reading 'Alltime_Total_Factor' //atf'
  if (affectedReadings & BMP180_R_ATF) {

	readingNameTextLen = asprintf((char **) &readingNameText
		,"Alltime_Total_Factor");

	readingValueTextLen = asprintf((char **) &readingValueText
		,"%d.%04d"
		,(int) (BMP180_Definition->IB01_AlltimeTotalFactor)	
		,(int) ( (BMP180_Definition->IB01_AlltimeTotalFactor -
		(int) BMP180_Definition->IB01_AlltimeTotalFactor) * 10000) );

	SCDEFn_at_BMP180_M->readingsBulkUpdateFn((Common_Definition_t*) BMP180_Definition
		,readingNameText
		,readingNameTextLen
		,readingValueText
		,readingValueTextLen);

  }
*/
//	RespArgsWPos += os_sprintf(RespArgsWPos
//		,"&atf=%d.%04d"
//		,(int)(SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_AlltimeTotalFactor)	
//		,(int)((SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_AlltimeTotalFactor -
//		(int)SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_AlltimeTotalFactor)*10000) );


//>Add Readings Bit 06 -----------------------------------------------------------------------------
/*
  // add reading 'Alltime_Total_Unit' //atu'
  if (affectedReadings & BMP180_R_ATU) {

	readingNameTextLen = asprintf((char **) &readingNameText
		,"Alltime_Total_Unit");

	readingValueTextLen = asprintf((char **) &readingValueText
		,"%s"
		,BMP180_Definition->IB01_AlltimeTotalUnit);

	SCDEFn_at_BMP180_M->readingsBulkUpdateFn((Common_Definition_t*) BMP180_Definition
		,readingNameText
		,readingNameTextLen
		,readingValueText
		,readingValueTextLen);

  }
*/
//	RespArgsWPos += os_sprintf(RespArgsWPos
//		,"&atu=%s"
//		,SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_AlltimeTotalUnit);


//>Add Readings Bit 07 -----------------------------------------------------------------------------
/*
  // add reading 'Debounce' //deb'
  if (affectedReadings & BMP180_R_DEB) {

	readingNameTextLen = asprintf((char **) &readingNameText
		,"Debounce");

	readingValueTextLen = asprintf((char **) &readingValueText
		,"%u"
		,BMP180_Definition->IB01_Debounce);

	SCDEFn_at_BMP180_M->readingsBulkUpdateFn((Common_Definition_t*) BMP180_Definition
		,readingNameText
		,readingNameTextLen
		,readingValueText
		,readingValueTextLen);

  }

*/
//	RespArgsWPos += os_sprintf(RespArgsWPos
//		,"&deb=%u"
//		,SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_Debounce);


//>Add Readings Bit 08 -----------------------------------------------------------------------------
/*
  if (affectedReadings & BMP180_R_name)
	{

	// add Unique-Feature-ID for identification purposes (Name-Change, ...)
	RespArgsWPos += S0_UFID(RespArgsWPos, ADID);

	// add capabilities of this feature ...
	RespArgsWPos += os_sprintf(RespArgsWPos,
		"&caps=0007");						// 0b11110 <-16BIT-HEX

	// add current name of this feature
	RespArgsWPos += os_sprintf(RespArgsWPos,
		"&name=%s",SysCfgRamFlashMirrored->MyS0_FeatCfgRamFlashMirrored[ADID].IB01_Name);

	}
*/

//>always add Reading - state ----------------------------------------------------------------------
/*
	// are we adding ?
	if (RespArgsWPos) RespArgsWPos += os_sprintf(RespArgsWPos,"&");

	// always add state ! on / off
	RespArgsWPos += os_sprintf(RespArgsWPos,
		"state=on");
*/
//--------------------------------------------------------------------------------------------------


  // all readings done, finnish update
//  SCDEFn_at_BMP180_M->readingsEndUpdateFn((Common_Definition_t*) BMP180_Definition);


  return true;
}







//https://github.com/krzychb/bmp180-tests/blob/master/components/bmp180/bmp180.c


/*
  ESP32_I2C_Master_Definition_t* ESP32_I2C_Master_Definition =
	BMP180_Definition->ESP32_I2C_Master_Definition

  // get table of function callbacks provided & made accessible from stage 1 Module
  ESP32_I2C_Master_Fn_t* ESP32_I2C_Master_Fn =
	BMP180_Definition->ESP32_I2C_Master_Fn;
*/



strTextMultiple_t* 
bmp180_master_write_slave(BMP180_Definition_t* BMP180_Definition,
	uint8_t* data_wr,
	size_t size)
{
  // for Fn response msg
  strTextMultiple_t* retMsg;

  // get table of function callbacks provided & made accessible from stage 1 Module
  ESP32_I2C_Master_Fn_t* ESP32_I2C_Master_Fn =
	BMP180_Definition->ESP32_I2C_Master_Definition->ESP32_I2C_Master_Fn;

  i2c_cmd_handle_t cmd = ESP32_I2C_Master_Fn->i2c_cmd_link_createFn();

  ESP32_I2C_Master_Fn->i2c_master_startFn(cmd);

  ESP32_I2C_Master_Fn->i2c_master_write_byteFn(cmd,
	( BMP180_ADDRESS  << 1 ) | I2C_MASTER_WRITE, ACK_CHECK_EN);

  ESP32_I2C_Master_Fn->i2c_master_writeFn(cmd, data_wr, size, ACK_CHECK_EN);

  ESP32_I2C_Master_Fn->i2c_master_stopFn(cmd);

  xString_t datax;
  datax.characters = (uint8_t*) cmd;
  datax.length = 8; //???

  retMsg = BMP180_Definition->ESP32_I2C_Master_Definition->common.module->provided->
	WriteFn((Common_Definition_t*) BMP180_Definition->ESP32_I2C_Master_Definition, datax);

  return retMsg;
}



strTextMultiple_t* 
bmp180_write_reg(BMP180_Definition_t* BMP180_Definition,
	uint8_t reg,
	uint8_t cmd)
{
  // for Fn response msg
  strTextMultiple_t* retMsg;

  uint8_t data_wr[] = {reg, cmd};

  retMsg = bmp180_master_write_slave(BMP180_Definition, data_wr, 2);

  if (retMsg) {
        ESP_LOGE(TAG, "Write [0x%02x] = 0x%02x failed, err = %d", reg, cmd, 0);//err);
    }

  return retMsg;
}


strTextMultiple_t*
bmp180_master_read_slave(BMP180_Definition_t* BMP180_Definition,
	uint8_t* data_rd,
	size_t size)
{
  if (size == 0) {

	return ESP_OK;
  }

  // for Fn response msg
  strTextMultiple_t* retMsg = NULL;

  // get table of function callbacks provided & made accessible from stage 1 Module
  ESP32_I2C_Master_Fn_t* ESP32_I2C_Master_Fn =
	BMP180_Definition->ESP32_I2C_Master_Definition->ESP32_I2C_Master_Fn;

  i2c_cmd_handle_t cmd = ESP32_I2C_Master_Fn->i2c_cmd_link_createFn();

  ESP32_I2C_Master_Fn->i2c_master_startFn(cmd);

  ESP32_I2C_Master_Fn->i2c_master_write_byteFn(cmd,
	( BMP180_ADDRESS << 1 ) | I2C_MASTER_READ, ACK_CHECK_EN);

  if (size > 1) {

	ESP32_I2C_Master_Fn->i2c_master_readFn(cmd, data_rd, size - 1, ACK_VAL);
  }

  ESP32_I2C_Master_Fn->i2c_master_read_byteFn(cmd, data_rd + size - 1, NACK_VAL);

  ESP32_I2C_Master_Fn->i2c_master_stopFn(cmd);

  xString_t datax;
  datax.characters = (uint8_t*) cmd;
  datax.length = 8; //???

  retMsg = BMP180_Definition->ESP32_I2C_Master_Definition->common.module->provided->
	WriteFn((Common_Definition_t*) BMP180_Definition->ESP32_I2C_Master_Definition, datax);

  return retMsg;
}



strTextMultiple_t* 
bmp180_read_int16(BMP180_Definition_t* BMP180_Definition,
	uint8_t reg,
	int16_t* value)
{
  // for Fn response msg
  strTextMultiple_t* retMsg;

  retMsg = bmp180_master_write_slave(BMP180_Definition, &reg, 1);

  if (!retMsg) {

	uint8_t data_rd[2] = {0};

	retMsg = bmp180_master_read_slave(BMP180_Definition, data_rd, 2);

	if (!retMsg) {

		*value = (int16_t) ((data_rd[0] << 8) | data_rd[1]);
	}
  }

  if (retMsg) {

	ESP_LOGE(TAG, "Read [0x%02x] int16 failed, err = %d", reg, 0);//err);
  }

  return retMsg;
}



strTextMultiple_t* 
bmp180_read_uint16(BMP180_Definition_t* BMP180_Definition,
	uint8_t reg,
	uint16_t* value)
{
 // for Fn response msg
  strTextMultiple_t* retMsg;

  retMsg = bmp180_master_write_slave(BMP180_Definition, &reg, 1);

  if (!retMsg) {

	uint8_t data_rd[2] = {0};

        retMsg = bmp180_master_read_slave(BMP180_Definition, data_rd, 2);

        if (!retMsg) {

		*value = (uint16_t) ((data_rd[0] << 8) | data_rd[1]);
	}
  }

  if (retMsg) {

	ESP_LOGE(TAG, "Read [0x%02x] uint16 failed, err = %d", reg, 0);//err);
  }

  return retMsg;
}



strTextMultiple_t* 
bmp180_read_uint32(BMP180_Definition_t* BMP180_Definition,
	uint8_t reg,
	uint32_t* value)
{
  // for Fn response msg
  strTextMultiple_t* retMsg;

  retMsg = bmp180_master_write_slave(BMP180_Definition, &reg, 1);

  if (!retMsg) {

	uint8_t data_rd[3] = {0};

 	retMsg = bmp180_master_read_slave(BMP180_Definition, data_rd, 3);

        if (!retMsg) {

		*value = (uint32_t) ((data_rd[0] << 16) | (data_rd[1] << 8) | data_rd[2]);
	}
  }

  if (retMsg) {

 	ESP_LOGE(TAG, "Read [0x%02x] uint16 failed, err = %d", reg, 0); //ERR!!!
  }

  return retMsg;
}



strTextMultiple_t* 
bmp180_read_uncompensated_temperature(BMP180_Definition_t* BMP180_Definition,
	int16_t* temp)
{
  // for Fn response msg
  strTextMultiple_t* retMsg;

  retMsg = bmp180_write_reg(BMP180_Definition, BMP180_CONTROL, BMP180_READ_TEMP_CMD);

  if (!retMsg) {

	TickType_t xDelay = 5 / portTICK_PERIOD_MS;

	if (xDelay == 0) {

		xDelay = 1;
	}

        vTaskDelay(xDelay);

        retMsg = bmp180_read_int16(BMP180_Definition, BMP180_DATA_TO_READ, temp);
  }

  if (retMsg) {

	ESP_LOGE(TAG, "Read uncompensated temperature failed, err =");// %d", err);
  }

  return retMsg;
}



strTextMultiple_t* 
bmp180_calculate_b5(BMP180_Definition_t* BMP180_Definition,
	int32_t* b5)
{
  // for Fn response msg
  strTextMultiple_t* retMsg;

  int16_t ut;
  int32_t x1, x2;

  retMsg = bmp180_read_uncompensated_temperature(BMP180_Definition, &ut);

  if (!retMsg) {

	x1 = ((ut - (int32_t) BMP180_Definition->ac6) * (int32_t) BMP180_Definition->ac5) >> 15;

	x2 = ((int32_t) BMP180_Definition->mc << 11) / (x1 + BMP180_Definition->md);

	*b5 = x1 + x2;

  } else {

	ESP_LOGE(TAG, "Calculate b5 failed, err ="); // %d", err);
  }

  return retMsg;
}



strTextMultiple_t*  
bmp180_read_uncompensated_pressure(BMP180_Definition_t* BMP180_Definition,
	uint32_t* up)
{
  // for Fn response msg
  strTextMultiple_t* retMsg;

  retMsg = bmp180_write_reg(BMP180_Definition,
	BMP180_CONTROL, BMP180_READ_PRESSURE_CMD + (BMP180_Definition->oversampling << 6));

  if (!retMsg) {

	TickType_t xDelay = (2 + (3 << BMP180_Definition->oversampling)) / portTICK_PERIOD_MS;

	if (xDelay == 0) {

		xDelay = 1;
	}

	vTaskDelay(xDelay);

        retMsg = bmp180_read_uint32(BMP180_Definition,
		BMP180_DATA_TO_READ, up);

	if (!retMsg) {

		*up >>= (8 - BMP180_Definition->oversampling);
	}
  }

    if (retMsg) {
        ESP_LOGE(TAG, "Read uncompensated pressure failed, err =");// %d", err);
    }

  return retMsg;
}



strTextMultiple_t* 
bmp180_read_temperature(BMP180_Definition_t* BMP180_Definition,
	float* temperature)
{
  // for Fn response msg
  strTextMultiple_t* retMsg;

  int32_t b5;

  retMsg = bmp180_calculate_b5(BMP180_Definition, &b5);

  if (!retMsg) {

	*temperature = ((b5 + 8) >> 4) / 10.0;

  } else {

 	ESP_LOGE(TAG, "Read temperature failed, err =");// %d", err);
  }

  return retMsg;
}



strTextMultiple_t* 
bmp180_read_pressure(BMP180_Definition_t* BMP180_Definition,
	uint32_t* pressure)
{
 // for Fn response msg
  strTextMultiple_t* retMsg;

  int32_t b3, b5, b6, x1, x2, x3, p;
  uint32_t up, b4, b7;

  retMsg = bmp180_calculate_b5(BMP180_Definition, &b5);

  if (!retMsg) {

	b6 = b5 - 4000;
	x1 = (BMP180_Definition->b2 * (b6 * b6) >> 12) >> 11;
	x2 = (BMP180_Definition->ac2 * b6) >> 11;
	x3 = x1 + x2;
	b3 = (((((int32_t)BMP180_Definition->ac1) * 4 + x3) << BMP180_Definition->oversampling) + 2) >> 2;

	x1 = (BMP180_Definition->ac3 * b6) >> 13;
	x2 = (BMP180_Definition->b1 * ((b6 * b6) >> 12)) >> 16;
	x3 = ((x1 + x2) + 2) >> 2;
	b4 = (BMP180_Definition->ac4 * (uint32_t)(x3 + 32768)) >> 15;

        retMsg  = bmp180_read_uncompensated_pressure(BMP180_Definition, &up);

	if (!retMsg) {

		b7 = ((uint32_t)(up - b3) * (50000 >> BMP180_Definition->oversampling));

		if (b7 < 0x80000000) {

			p = (b7 << 1) / b4;

		} else {

			p = (b7 / b4) << 1;
		}

		x1 = (p >> 8) * (p >> 8);
		x1 = (x1 * 3038) >> 16;
		x2 = (-7357 * p) >> 16;
		p += (x1 + x2 + 3791) >> 4;
		*pressure = p;
	}
  }

  if (retMsg) {

	ESP_LOGE(TAG, "Pressure compensation failed, err =");// %d", err);
  }

  return retMsg;
}



strTextMultiple_t* 
bmp180_read_altitude(BMP180_Definition_t* BMP180_Definition,
	uint32_t reference_pressure,
	float* altitude)
{
  // for Fn response msg
  strTextMultiple_t* retMsg;

  uint32_t absolute_pressure;

  retMsg = bmp180_read_pressure(BMP180_Definition, &absolute_pressure);

  if (!retMsg) {

	*altitude =  44330 * (1.0 - powf(absolute_pressure / (float) reference_pressure, 0.190295));

  } else {

	ESP_LOGE(TAG, "Read altitude failed, err =");// %d", err);
  }

  return retMsg;
}







































/* verbessern: init null streichen
 strTextMultiple_t* retMsg = bmp180_read_uncompensated_temperature(&ut);

(RetMsg != SCDE_OK)

replace log!
 ESP_LOGE(TAG, 
*/












